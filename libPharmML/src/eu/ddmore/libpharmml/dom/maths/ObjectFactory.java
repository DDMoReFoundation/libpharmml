/*******************************************************************************
 * Copyright (c) 2014,2015 European Molecular Biology Laboratory,
 * Heidelberg, Germany.
 * 
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of
 * the License at
 * 
 *  		http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on 
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations 
 * under the License.
 ******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.24 at 03:18:36 PM GMT 
//


package eu.ddmore.libpharmml.dom.maths;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;

import eu.ddmore.libpharmml.dom.commontypes.OidRef;
import static eu.ddmore.libpharmml.impl.XMLFilter.NS_DEFAULT_MATH;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the eu.ddmore.libpharmml.dom.maths package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _FunctionCall_QNAME = new QName(NS_DEFAULT_MATH, "FunctionCall");
    private final static QName _Constant_QNAME = new QName(NS_DEFAULT_MATH, "Constant");
    private final static QName _LogicUniop_QNAME = new QName(NS_DEFAULT_MATH, "LogicUniop");
    private final static QName _LogicBinop_QNAME = new QName(NS_DEFAULT_MATH, "LogicBinop");
    private final static QName _Otherwise_QNAME = new QName(NS_DEFAULT_MATH, "Otherwise");
    private final static QName _Uniop_QNAME = new QName(NS_DEFAULT_MATH, "Uniop");
    private final static QName _Binop_QNAME = new QName(NS_DEFAULT_MATH, "Binop");
    private final static QName _EquationTypePiecewise_QNAME = new QName(NS_DEFAULT_MATH, "Piecewise");
    private final static QName _Equation_QNAME = new QName(NS_DEFAULT_MATH, "Equation");
    
    // PharmML 0.7
    private final static QName _MatrixUniop_QNAME = new QName(NS_DEFAULT_MATH, "MatrixUniop");
    private final static QName _LogicBinOpTypeArmRef_QNAME = new QName(NS_DEFAULT_MATH, "ArmRef");
    
    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: eu.ddmore.libpharmml.dom.maths
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link FunctionCallType }
     * 
     */
    public FunctionCallType createFunctionCallType() {
        return new FunctionCallType();
    }

    /**
     * Create an instance of {@link Condition }
     * 
     */
    public Condition createCondition() {
        return new Condition();
    }

    /**
     * Create an instance of {@link LogicCondition }
     * 
     */
    public LogicCondition createLogicConditionType() {
        return new LogicCondition();
    }

    /**
     * Create an instance of {@link LogicBinOp }
     * 
     */
    public LogicBinOp createLogicBinOpType() {
        return new LogicBinOp();
    }

    /**
     * Create an instance of {@link LogicUniOp }
     * 
     */
    public LogicUniOp createLogicUniOpType() {
        return new LogicUniOp();
    }

    /**
     * Create an instance of {@link Binop }
     * 
     */
    public Binop createBinopType() {
        return new Binop();
    }

    /**
     * Create an instance of {@link Equation }
     * 
     */
    @Deprecated
    public Equation createEquation() {
        return new Equation();
    }

    /**
     * Create an instance of {@link EquationType }
     * 
     */
    @Deprecated
    public EquationType createEquationType() {
        return new EquationType();
    }

    /**
     * Create an instance of {@link Uniop }
     * 
     */
    public Uniop createUniopType() {
        return new Uniop();
    }

    /**
     * Create an instance of {@link Piecewise }
     * 
     */
    public Piecewise createPiecewiseType() {
        return new Piecewise();
    }

    /**
     * Create an instance of {@link Constant }
     * 
     */
    public Constant createConstantType() {
        return new Constant();
    }

    /**
     * Create an instance of {@link Expression }
     * 
     */
    public Expression createExprType() {
        return new Expression();
    }

    /**
     * Create an instance of {@link LogicExpression }
     * 
     */
    public LogicExpression createLogicExprType() {
        return new LogicExpression();
    }

    /**
     * Create an instance of {@link Piece }
     * 
     */
    public Piece createPieceType() {
        return new Piece();
    }

    /**
     * Create an instance of {@link FunctionArgumentType }
     * 
     */
    public FunctionArgumentType createFunctionArgumentType() {
        return new FunctionArgumentType();
    }

    /**
     * Create an instance of {@link FunctionCallType.FunctionArgument }
     * 
     */
    public FunctionCallType.FunctionArgument createFunctionCallTypeFunctionArgument() {
        return new FunctionCallType.FunctionArgument();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link FunctionCallType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = NS_DEFAULT_MATH, name = "FunctionCall")
    public JAXBElement<FunctionCallType> createFunctionCall(FunctionCallType value) {
        return new JAXBElement<FunctionCallType>(_FunctionCall_QNAME, FunctionCallType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Constant }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = NS_DEFAULT_MATH, name = "Constant")
    public JAXBElement<Constant> createConstant(Constant value) {
        return new JAXBElement<Constant>(_Constant_QNAME, Constant.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LogicUniOp }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = NS_DEFAULT_MATH, name = "LogicUniop")
    public JAXBElement<LogicUniOp> createLogicUniop(LogicUniOp value) {
        return new JAXBElement<LogicUniOp>(_LogicUniop_QNAME, LogicUniOp.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LogicBinOp }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = NS_DEFAULT_MATH, name = "LogicBinop")
    public JAXBElement<LogicBinOp> createLogicBinop(LogicBinOp value) {
        return new JAXBElement<LogicBinOp>(_LogicBinop_QNAME, LogicBinOp.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Object }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = NS_DEFAULT_MATH, name = "Otherwise")
    public JAXBElement<Otherwise> createOtherwise(Otherwise value) {
        return new JAXBElement<Otherwise>(_Otherwise_QNAME, Otherwise.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Uniop }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = NS_DEFAULT_MATH, name = "Uniop")
    public JAXBElement<Uniop> createUniop(Uniop value) {
        return new JAXBElement<Uniop>(_Uniop_QNAME, Uniop.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Binop }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = NS_DEFAULT_MATH, name = "Binop")
    public JAXBElement<Binop> createBinop(Binop value) {
        return new JAXBElement<Binop>(_Binop_QNAME, Binop.class, null, value);
    }
    
    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Equation }{@code >}}
     * 
     */
    @Deprecated
    @XmlElementDecl(namespace = NS_DEFAULT_MATH, name = "Equation")
    public JAXBElement<Equation> createEquation(Equation value) {
        return new JAXBElement<Equation>(_Equation_QNAME, Equation.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Piecewise }{@code >}}
     * 
     */
	@SuppressWarnings("deprecation")
	@Deprecated
    @XmlElementDecl(namespace = NS_DEFAULT_MATH, name = "Piecewise", scope = EquationType.class)
    public JAXBElement<Piecewise> createEquationTypePiecewise(Piecewise value) {
        return new JAXBElement<Piecewise>(_EquationTypePiecewise_QNAME, Piecewise.class, EquationType.class, value);
    }
	
	// PharmML 0.7
	/**
     * Create an instance of {@link JAXBElement }{@code <}{@link MatrixUniOp }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = NS_DEFAULT_MATH, name = "MatrixUniop")
    public JAXBElement<MatrixUniOp> createMatrixUniop(MatrixUniOp value) {
        return new JAXBElement<MatrixUniOp>(_MatrixUniop_QNAME, MatrixUniOp.class, null, value);
    }
    
    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link OidRef }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = NS_DEFAULT_MATH, name = "ArmRef", scope = LogicBinOp.class)
    public JAXBElement<OidRef> createLogicBinOpTypeArmRef(OidRef value) {
        return new JAXBElement<OidRef>(_LogicBinOpTypeArmRef_QNAME, OidRef.class, LogicBinOp.class, value);
    }

}
