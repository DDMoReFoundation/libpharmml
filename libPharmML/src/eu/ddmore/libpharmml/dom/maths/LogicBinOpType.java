/*******************************************************************************
 * Copyright (c) 2014 European Molecular Biology Laboratory,
 * Heidelberg, Germany.
 *
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of
 * the License at
 *
 * 		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on 
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations 
 * under the License.
 *******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.24 at 03:18:36 PM GMT 
//


package eu.ddmore.libpharmml.dom.maths;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import eu.ddmore.libpharmml.dom.commontypes.BooleanType;
import eu.ddmore.libpharmml.dom.commontypes.FalseBooleanType;
import eu.ddmore.libpharmml.dom.commontypes.IdValueType;
import eu.ddmore.libpharmml.dom.commontypes.IntValueType;
import eu.ddmore.libpharmml.dom.commontypes.RealValueType;
import eu.ddmore.libpharmml.dom.commontypes.StringValueType;
import eu.ddmore.libpharmml.dom.commontypes.SymbolRefType;
import eu.ddmore.libpharmml.dom.commontypes.TrueBooleanType;


/**
 * The schema type defining a binary logical operator.
 * 
 * <p>Java class for LogicBinOpType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="LogicBinOpType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;choice>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/Maths}LogicBinop"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/Maths}LogicUniop"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/CommonTypes}Scalar"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/Maths}Constant"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/CommonTypes}SymbRef"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/08/Dataset}ColumnRef"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/Maths}Binop"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/Maths}Uniop"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/Maths}FunctionCall"/>
 *         &lt;/choice>
 *         &lt;choice>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/Maths}LogicBinop"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/Maths}LogicUniop"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/CommonTypes}Scalar"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/Maths}Constant"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/CommonTypes}SymbRef"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/Maths}Binop"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/Maths}Uniop"/>
 *           &lt;element ref="{http://www.pharmml.org/2013/03/Maths}FunctionCall"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *       &lt;attribute name="op" use="required">
 *         &lt;simpleType>
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}Name">
 *             &lt;enumeration value="lt"/>
 *             &lt;enumeration value="leq"/>
 *             &lt;enumeration value="gt"/>
 *             &lt;enumeration value="geq"/>
 *             &lt;enumeration value="eq"/>
 *             &lt;enumeration value="neq"/>
 *             &lt;enumeration value="and"/>
 *             &lt;enumeration value="or"/>
 *             &lt;enumeration value="xor"/>
 *           &lt;/restriction>
 *         &lt;/simpleType>
 *       &lt;/attribute>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "LogicBinOpType", propOrder = {
    "content"
})
public class LogicBinOpType {

	@XmlElementRefs({
        @XmlElementRef(name = "Uniop", namespace = "http://www.pharmml.org/2013/03/Maths", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "LogicBinop", namespace = "http://www.pharmml.org/2013/03/Maths", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "ColumnRef", namespace = "http://www.pharmml.org/2013/08/Dataset", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "SymbRef", namespace = "http://www.pharmml.org/2013/03/CommonTypes", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "Constant", namespace = "http://www.pharmml.org/2013/03/Maths", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "FunctionCall", namespace = "http://www.pharmml.org/2013/03/Maths", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "LogicUniop", namespace = "http://www.pharmml.org/2013/03/Maths", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "Binop", namespace = "http://www.pharmml.org/2013/03/Maths", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "Scalar", namespace = "http://www.pharmml.org/2013/03/CommonTypes", type = JAXBElement.class, required = false)
    })
    protected List<JAXBElement<?>> content;
    @XmlAttribute(name = "op", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String op;

    /**
     * Gets the value of the content property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the content property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getContent().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link LogicBinOpType }{@code >}
     * {@link JAXBElement }{@code <}{@link ColumnRefType }{@code >}
     * {@link JAXBElement }{@code <}{@link RealValueType }{@code >}
     * {@link JAXBElement }{@code <}{@link StringValueType }{@code >}
     * {@link JAXBElement }{@code <}{@link FunctionCallType }{@code >}
     * {@link JAXBElement }{@code <}{@link LogicUniOpType }{@code >}
     * {@link JAXBElement }{@code <}{@link IdValueType }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link IntValueType }{@code >}
     * {@link JAXBElement }{@code <}{@link BinopType }{@code >}
     * {@link JAXBElement }{@code <}{@link UniopType }{@code >}
     * {@link JAXBElement }{@code <}{@link FalseBooleanType }{@code >}
     * {@link JAXBElement }{@code <}{@link SymbolRefType }{@code >}
     * {@link JAXBElement }{@code <}{@link ConstantType }{@code >}
     * {@link JAXBElement }{@code <}{@link BooleanType }{@code >}
     * {@link JAXBElement }{@code <}{@link TrueBooleanType }{@code >}
     * 
     * <p>
     * In order to be compliant with the PharmML specification (>= 0.3.1), only 1 {@link ColumnRefType } is allowed in the content,
     * and should always be the 1st operand (i.e., the first element of this list). Anyway, this is checked only
     * during the XSD-based validation process.
     * </p>
     */
    public List<JAXBElement<?>> getContent() {
        if (content == null) {
            content = new ArrayList<JAXBElement<?>>();
        }
        return this.content;
    }

    /**
     * Gets the value of the op property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOp() {
        return op;
    }

    /**
     * Sets the value of the op property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOp(String value) {
        this.op = value;
    }

}
