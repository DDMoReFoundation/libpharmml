/*******************************************************************************
 * Copyright (c) 2014-2016 European Molecular Biology Laboratory,
 * Heidelberg, Germany.
 * 
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of
 * the License at
 * 
 *  		http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on 
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations 
 * under the License.
 ******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.24 at 03:18:36 PM GMT 
//


package eu.ddmore.libpharmml.dom.trialdesign;

import java.util.ArrayList;
import java.util.List;

import javax.swing.tree.TreeNode;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import eu.ddmore.libpharmml.dom.commontypes.PharmMLRootType;
import eu.ddmore.libpharmml.dom.commontypes.VariableAssignment;
import eu.ddmore.libpharmml.dom.dataset.ColumnMapping;
import eu.ddmore.libpharmml.dom.dataset.DataSet;
import eu.ddmore.libpharmml.dom.dataset.DatasetMap;
import eu.ddmore.libpharmml.dom.modellingsteps.MappingType;
import eu.ddmore.libpharmml.dom.modellingsteps.VariableMapping;
import eu.ddmore.libpharmml.dom.tags.PharmMLObject;
import eu.ddmore.libpharmml.impl.PharmMLVersion;
import eu.ddmore.libpharmml.impl.XMLFilter;
import eu.ddmore.libpharmml.util.ChainedList;
import eu.ddmore.libpharmml.util.annotations.HasElementRenamed;
import eu.ddmore.libpharmml.util.annotations.HasElementsRenamed;
import eu.ddmore.libpharmml.util.annotations.RenamedElement;


/**
 * 
 *                 A type defining type data and task settings.                
 *             
 * 
 * <p>Java class for DatasetMappingType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DatasetMappingType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.pharmml.org/2013/03/CommonTypes}PharmMLRootType">
 *       &lt;sequence>
 *         &lt;element name="ColumnMapping" type="{http://www.pharmml.org/2013/08/Dataset}ColumnMappingType" maxOccurs="unbounded"/>
 *         &lt;element ref="{http://www.pharmml.org/2013/08/Dataset}DataSet"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@SuppressWarnings("deprecation")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DatasetMappingType", propOrder = {
    "variableAssignment",
    "mapping",
	"msteps_columnMapping",
	"td_columnMapping",
    "dataSet"
})
@HasElementsRenamed(value = { 
		@HasElementRenamed(mappedFields = { 
				@RenamedElement(field = "msteps_columnMapping"),
				@RenamedElement(field = "td_columnMapping", since = PharmMLVersion.V0_7_3)}, 
				transientField = "transient_columnMapping") })
public class DatasetMapping
    extends PharmMLRootType implements DatasetMap, PharmMLObject
{

	@XmlElement(name = "VariableAssignment", namespace = XMLFilter.NS_DEFAULT_CT)
	@Deprecated
    protected List<VariableAssignment> variableAssignment;
	@XmlElementRef(name = "Mapping", namespace = XMLFilter.NS_DEFAULT_MSTEPS, type = JAXBElement.class)
	@Deprecated
    protected List<JAXBElement<? extends MappingType>> mapping;
	
    @XmlElement(name = "ColumnMapping", namespace = XMLFilter.NS_DEFAULT_MSTEPS, required = true)
    protected List<ColumnMapping> msteps_columnMapping;
    @XmlElement(name = "ColumnMapping", required = true)
    protected List<ColumnMapping> td_columnMapping;
    @XmlTransient
    protected List<ColumnMapping> transient_columnMapping;
    
    @XmlElement(name = "DataSet", namespace = XMLFilter.NS_DEFAULT_DS, required = true)
    protected DataSet dataSet;
    
    // PharmML 0.7
    @XmlAttribute(name = "oid", required = true)
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String oid;
    
    /**
     * Empty constructor
     */
    public DatasetMapping() {
	}
    
    public DatasetMapping(String oid){
    	this.oid = oid;
	}

	/**
     * 
     *                                 Initialises a variable.  
     *                             Gets the value of the variableAssignment property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the variableAssignment property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVariableAssignment().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link VariableAssignment }
     * 
     * @deprecated Since PharmML 0.3
     */
    @Deprecated
    public List<VariableAssignment> getVariableAssignment() {
        if (variableAssignment == null) {
            variableAssignment = new ArrayList<VariableAssignment>();
        }
        return this.variableAssignment;
    }
	
	/**
     * 
     *                                 Defines mapping to the dataset containing objective data. 
     *                             Gets the value of the mapping property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the mapping property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMapping().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link VariableMapping }{@code >}
     * {@link JAXBElement }{@code <}{@link MappingType }{@code >}
     * {@link JAXBElement }{@code <}{@link IndividualMapping }{@code >}
     * 
     * @deprecated Since PharmML 0.3
     */
    @Deprecated
    public List<JAXBElement<? extends MappingType>> getMapping() {
        if (mapping == null) {
            mapping = new ArrayList<JAXBElement<? extends MappingType>>();
        }
        return this.mapping;
    }
	
    /**
     * @deprecated Use {@link #getListOfColumnMapping()}.
     */
    @Deprecated
    public List<ColumnMapping> getColumnMapping() {
        return getListOfColumnMapping();
    }

    /**
     * 
     *                                 Instantiates the individual template defined above with data for each subject within
     *                                 the study.
     *                             
     * 
     * @return
     *     possible object is
     *     {@link DataSet }
     *     
     */
    public DataSet getDataSet() {
        return dataSet;
    }

    /**
     * Sets the value of the dataSet property.
     * 
     * @param value
     *     allowed object is
     *     {@link DataSet }
     *     
     */
    public void setDataSet(DataSet value) {
        this.dataSet = value;
    }
    
    /**
     * Gets the value of the oid property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOid() {
        return oid;
    }

    /**
     * Sets the value of the oid property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOid(String value) {
        this.oid = value;
    }
    
    @Override
	protected List<TreeNode> listChildren() {
		return new ChainedList<TreeNode>()
				.addIfNotNull(transient_columnMapping)
				.addIfNotNull(dataSet);
	}

	@Override
	public List<ColumnMapping> getListOfColumnMapping() {
		if (transient_columnMapping == null) {
			transient_columnMapping = new ArrayList<ColumnMapping>();
        }
        return this.transient_columnMapping;
	}
	
	/**
	 * Creates a new empty {@link ColumnMapping} columnMapping element, adds it to the current object and returns it.
	 * @return The created {@link ColumnMapping} object.
	 */
	public ColumnMapping createColumnMapping(){
	        ColumnMapping el = new ColumnMapping();
	        getListOfColumnMapping().add(el);
	        return el;
	}

	/**
	 * Creates a new empty {@link DataSet} dataSet element, adds it to the current object and returns it.
	 * @return The created {@link DataSet} object.
	 */
	public DataSet createDataSet(){
	        DataSet el = new DataSet();
	        this.dataSet = el;
	        return el;
	}

}
