/*******************************************************************************
 * Copyright (c) 2014-2016 European Molecular Biology Laboratory,
 * Heidelberg, Germany.
 * 
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of
 * the License at
 * 
 *  		http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on 
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations 
 * under the License.
 ******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.24 at 03:18:36 PM GMT 
//


package eu.ddmore.libpharmml.dom.dataset;

import java.util.ArrayList;
import java.util.List;

import javax.swing.tree.TreeNode;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlType;

import eu.ddmore.libpharmml.dom.commontypes.BooleanValue;
import eu.ddmore.libpharmml.dom.commontypes.FalseBoolean;
import eu.ddmore.libpharmml.dom.commontypes.IdValue;
import eu.ddmore.libpharmml.dom.commontypes.IntValue;
import eu.ddmore.libpharmml.dom.commontypes.PharmMLRootType;
import eu.ddmore.libpharmml.dom.commontypes.RealValue;
import eu.ddmore.libpharmml.dom.commontypes.Scalar;
import eu.ddmore.libpharmml.dom.commontypes.StringValue;
import eu.ddmore.libpharmml.dom.commontypes.TrueBoolean;
import eu.ddmore.libpharmml.impl.LoggerWrapper;
import eu.ddmore.libpharmml.impl.PharmMLVersion;
import eu.ddmore.libpharmml.util.ChainedList;
import eu.ddmore.libpharmml.visitor.Visitor;


/**
 * 
 *                 This type specifies a row of values in the dataset. The row contains a cell which is
 *                 a scalar value, null.
 *             
 * 
 * <p>Java class for DatasetRowType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DatasetRowType">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice maxOccurs="unbounded">
 *         &lt;element ref="{http://www.pharmml.org/2013/03/CommonTypes}Scalar"/>
 *       &lt;/choice>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DatasetRowType", propOrder = {
	"scalarOrTable",
    "listOfValues"
})
public class DatasetRow extends PharmMLRootType{

	@XmlElementRefs({
        @XmlElementRef(name = "Table", namespace = NS_DEFAULT_DS, type = JAXBElement.class, required = false),
        @XmlElementRef(name = "Scalar", namespace = NS_DEFAULT_CT, type = JAXBElement.class, required = false)
    })
    protected List<JAXBElement<?>> scalarOrTable;

//    @XmlElementRef(name = "Scalar", namespace = "http://www.pharmml.org/2013/03/CommonTypes", type = JAXBElement.class, required = false)
//    protected List<JAXBElement<?>> scalar;
	
	@XmlElementRef(name = "Scalar", namespace = NS_DEFAULT_CT, type = JAXBElement.class, required = false)
	protected List<Scalar> listOfValues;


	/**
     * Gets the value of the scalarOrTable property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the scalarOrTable property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getScalarOrTable().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link IdValue }{@code >}
     * {@link JAXBElement }{@code <}{@link DataSetTable }{@code >}
     * {@link JAXBElement }{@code <}{@link BooleanValue }{@code >}
     * {@link JAXBElement }{@code <}{@link FalseBoolean }{@code >}
     * {@link JAXBElement }{@code <}{@link StringValue }{@code >}
     * {@link JAXBElement }{@code <}{@link RealValue }{@code >}
     * {@link JAXBElement }{@code <}{@link TrueBoolean }{@code >}
     * {@link JAXBElement }{@code <}{@link IntValue }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * 
     * @deprecated Since version 0.3. This method should only be used with 0.2 PharmML documents. 
     * Use {@link #getListOfValue()} instead.
     */
    @Deprecated
	public List<JAXBElement<?>> getScalarOrTable() {
        if (scalarOrTable == null) {
            scalarOrTable = new ArrayList<JAXBElement<?>>();
        }
        return this.scalarOrTable;
    }
    
    public List<Scalar> getListOfValue(){
    	if(listOfValues == null){
    		listOfValues = new ArrayList<Scalar>();
    	}
    	return this.listOfValues;
    }

//    /**
//     * Gets the value of the scalar property.
//     * 
//     * <p>
//     * This accessor method returns a reference to the live list,
//     * not a snapshot. Therefore any modification you make to the
//     * returned list will be present inside the JAXB object.
//     * This is why there is not a <CODE>set</CODE> method for the scalar property.
//     * 
//     * <p>
//     * For example, to add a new item, do as follows:
//     * <pre>
//     *    getScalar().add(newItem);
//     * </pre>
//     * 
//     * 
//     * <p>
//     * Objects of the following type(s) are allowed in the list
//     * {@link JAXBElement }{@code <}{@link IdValueType }{@code >}
//     * {@link JAXBElement }{@code <}{@link FalseBooleanType }{@code >}
//     * {@link JAXBElement }{@code <}{@link StringValueType }{@code >}
//     * {@link JAXBElement }{@code <}{@link IntValueType }{@code >}
//     * {@link JAXBElement }{@code <}{@link Object }{@code >}
//     * {@link JAXBElement }{@code <}{@link RealValueType }{@code >}
//     * {@link JAXBElement }{@code <}{@link BooleanType }{@code >}
//     * {@link JAXBElement }{@code <}{@link TrueBooleanType }{@code >}
//     * 
//     * 
//     */
//    public List<JAXBElement<?>> getScalar() {
//        if (scalar == null) {
//            scalar = new ArrayList<JAXBElement<?>>();
//        }
//        return this.scalar;
//    }
    
    /**
     * Gets the number of elements within that row.
     * @return The number of elements as an integer within that row.
     */
    public int size(){
    	if(getUnmarshalVersion().equals(PharmMLVersion.V0_2_1)){
    		return getScalarOrTable().size();
    	} else {
    		return getListOfValue().size();
    	}
    }
    
    protected void afterUnmarshal(Unmarshaller unmarshaller, Object parent){
    	PharmMLVersion version = getUnmarshalVersion();
    	switch(version){
    	case V0_2_1 :
    		// nothing to do. Keep scalarOrTable attribute
    		break;
    	default :
    		if(getScalarOrTable().size() > 0){
    			for(JAXBElement<?> scalOrTab : getScalarOrTable()){
        			if(scalOrTab.getValue() instanceof Scalar){
        				getListOfValue().add((Scalar) scalOrTab.getValue());
        				LoggerWrapper.getLogger().info("Moved 1 scalar from scalarOrTable attribute to scalar attribute in "+this);
        			} else {
        				LoggerWrapper.getLogger().warning("Skipping 1 element of type \""+scalOrTab.getName()+" in the element "+this+". No more used in version "+version);
        			}
        		}
    			getScalarOrTable().clear();
    		}
    	}
    }

	@Override
	protected List<TreeNode> listChildren() {
		return new ChainedList<TreeNode>().addIfNotNull(listOfValues);
	}
	
	@Override
	public void accept(Visitor visitor) {
		visitor.visit(this);
	}

}
