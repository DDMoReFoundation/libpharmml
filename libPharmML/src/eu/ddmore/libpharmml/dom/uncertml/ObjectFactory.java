/*******************************************************************************
 * Copyright (c) 2014-2016 European Molecular Biology Laboratory,
 * Heidelberg, Germany.
 * 
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of
 * the License at
 * 
 *  		http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on 
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations 
 * under the License.
 ******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.24 at 03:18:36 PM GMT 
//


package eu.ddmore.libpharmml.dom.uncertml;

import java.math.BigInteger;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.namespace.QName;

import eu.ddmore.libpharmml.impl.XMLFilter;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the eu.ddmore.libpharmml.dom.uncertml package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _ConfidenceInterval_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "ConfidenceInterval");
    private final static QName _AbstractCategoricalDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractCategoricalDistribution");
    private final static QName _Quantile_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Quantile");
    private final static QName _MultivariateNormalDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "MultivariateNormalDistribution");
    private final static QName _UniformDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "UniformDistribution");
    private final static QName _ContinuousUnivariateMixtureModel_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "ContinuousUnivariateMixtureModel");
    private final static QName _LaplaceDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "LaplaceDistribution");
    private final static QName _ArrayVar_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "arrayVar");
    private final static QName _Mode_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Mode");
    private final static QName _Skewness_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Skewness");
    private final static QName _CredibleInterval_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "CredibleInterval");
    private final static QName _BernoulliDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "BernoulliDistribution");
    private final static QName _DiscreteUnivariateMixtureModel_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "DiscreteUnivariateMixtureModel");
    private final static QName _ConfusionMatrix_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "ConfusionMatrix");
    private final static QName _BinomialDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "BinomialDistribution");
    private final static QName _FDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "FDistribution");
    private final static QName _Kurtosis_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Kurtosis");
    private final static QName _WishartDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "WishartDistribution");
    private final static QName _DiscreteMultivariateMixtureModel_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "DiscreteMultivariateMixtureModel");
    private final static QName _AbstractDiscreteDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractDiscreteDistribution");
    private final static QName _StatisticsCollection_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "StatisticsCollection");
    private final static QName _StudentTDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "StudentTDistribution");
    private final static QName _NegativeBinomialDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "NegativeBinomialDistribution");
    private final static QName _Median_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Median");
    private final static QName _WeibullDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "WeibullDistribution");
    private final static QName _Range_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Range");
    private final static QName _UncertML_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "UncertML");
    private final static QName _AbstractCategoricalUnivariateDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractCategoricalUnivariateDistribution");
    private final static QName _AbstractDiscreteMultivariateDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractDiscreteMultivariateDistribution");
    private final static QName _StandardDeviation_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "StandardDeviation");
    private final static QName _Percentile_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Percentile");
    private final static QName _GammaDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "GammaDistribution");
    private final static QName _AbstractSample_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractSample");
    private final static QName _Quartile_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Quartile");
    private final static QName _DiscreteProbability_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "DiscreteProbability");
    private final static QName _Decile_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Decile");
    private final static QName _ContinuousMultivariateMixtureModel_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "ContinuousMultivariateMixtureModel");
    private final static QName _AbstractMetric_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractMetric");
    private final static QName _NVal_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "nVal");
    private final static QName _AbstractDiscreteUnivariateDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractDiscreteUnivariateDistribution");
    private final static QName _AbstractContinuousMultivariateDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractContinuousMultivariateDistribution");
    private final static QName _DiracDeltaDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "DiracDeltaDistribution");
    private final static QName _BetaDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "BetaDistribution");
    private final static QName _SystematicSample_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "SystematicSample");
    private final static QName _MultinomialDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "MultinomialDistribution");
    private final static QName _Realisation_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Realisation");
    private final static QName _ExponentialDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "ExponentialDistribution");
    private final static QName _AbstractDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractDistribution");
    private final static QName _AbstractContinuousUnivariateDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractContinuousUnivariateDistribution");
    private final static QName _AbstractSummaryStatistic_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractSummaryStatistic");
    private final static QName _CategoricalUnivariateMixtureModel_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "CategoricalUnivariateMixtureModel");
    private final static QName _CategoricalDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "CategoricalDistribution");
    private final static QName _NormalInverseGammaDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "NormalInverseGammaDistribution");
    private final static QName _Correlation_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Correlation");
    private final static QName _ParetoDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "ParetoDistribution");
    private final static QName _Probability_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Probability");
    private final static QName _CategoricalMultivariateMixtureModel_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "CategoricalMultivariateMixtureModel");
    private final static QName _ChiSquareDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "ChiSquareDistribution");
    private final static QName _Mean_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Mean");
    private final static QName _AbstractUncertainty_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractUncertainty");
    private final static QName _InverseGammaDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "InverseGammaDistribution");
    private final static QName _PoissonDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "PoissonDistribution");
    private final static QName _LogNormalDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "LogNormalDistribution");
    private final static QName _CovarianceMatrix_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "CovarianceMatrix");
    private final static QName _AbstractCategoricalMultivariateDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractCategoricalMultivariateDistribution");
    private final static QName _HypergeometricDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "HypergeometricDistribution");
    private final static QName _RandomSample_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "RandomSample");
    private final static QName _MultivariateStudentTDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "MultivariateStudentTDistribution");
    private final static QName _DirichletDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "DirichletDistribution");
    private final static QName _CoefficientOfVariation_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "CoefficientOfVariation");
    private final static QName _AbstractContinuousDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "AbstractContinuousDistribution");
    private final static QName _UnknownSample_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "UnknownSample");
    private final static QName _Moment_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Moment");
    private final static QName _InterquartileRange_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "InterquartileRange");
    private final static QName _NormalDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "NormalDistribution");
    private final static QName _LogisticDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "LogisticDistribution");
    private final static QName _CauchyDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "CauchyDistribution");
    private final static QName _CentredMoment_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "CentredMoment");
    private final static QName _Var_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "var");
    private final static QName _Variance_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "Variance");
    private final static QName _GeometricDistribution_QNAME = new QName(XMLFilter.NS_DEFAULT_UNCERTML, "GeometricDistribution");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: eu.ddmore.libpharmml.dom.uncertml
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link DiscreteMultivariateMixtureModelType }
     * 
     */
    public DiscreteMultivariateMixtureModelType createDiscreteMultivariateMixtureModelType() {
        return new DiscreteMultivariateMixtureModelType();
    }

    /**
     * Create an instance of {@link CategoricalUnivariateMixtureModelType }
     * 
     */
    public CategoricalUnivariateMixtureModelType createCategoricalUnivariateMixtureModelType() {
        return new CategoricalUnivariateMixtureModelType();
    }

    /**
     * Create an instance of {@link ContinuousMultivariateMixtureModelType }
     * 
     */
    public ContinuousMultivariateMixtureModelType createContinuousMultivariateMixtureModelType() {
        return new ContinuousMultivariateMixtureModelType();
    }

    /**
     * Create an instance of {@link DiscreteUnivariateMixtureModelType }
     * 
     */
    public DiscreteUnivariateMixtureModelType createDiscreteUnivariateMixtureModelType() {
        return new DiscreteUnivariateMixtureModelType();
    }

    /**
     * Create an instance of {@link CategoricalMultivariateMixtureModelType }
     * 
     */
    public CategoricalMultivariateMixtureModelType createCategoricalMultivariateMixtureModelType() {
        return new CategoricalMultivariateMixtureModelType();
    }

    /**
     * Create an instance of {@link ContinuousUnivariateMixtureModelType }
     * 
     */
    public ContinuousUnivariateMixtureModelType createContinuousUnivariateMixtureModelType() {
        return new ContinuousUnivariateMixtureModelType();
    }

    /**
     * Create an instance of {@link Probability }
     * 
     */
    public Probability createProbability() {
        return new Probability();
    }

    /**
     * Create an instance of {@link ParetoDistribution }
     * 
     */
    public ParetoDistribution createParetoDistribution() {
        return new ParetoDistribution();
    }

    /**
     * Create an instance of {@link DiscreteMultivariateMixtureModel }
     * 
     */
    public DiscreteMultivariateMixtureModel createDiscreteMultivariateMixtureModel() {
        return new DiscreteMultivariateMixtureModel();
    }

    /**
     * Create an instance of {@link Correlation }
     * 
     */
    public Correlation createCorrelation() {
        return new Correlation();
    }

    /**
     * Create an instance of {@link NormalInverseGammaDistribution }
     * 
     */
    public NormalInverseGammaDistribution createNormalInverseGammaDistribution() {
        return new NormalInverseGammaDistribution();
    }

    /**
     * Create an instance of {@link CategoricalDistribution }
     * 
     */
    public CategoricalDistribution createCategoricalDistribution() {
        return new CategoricalDistribution();
    }

    /**
     * Create an instance of {@link WishartDistribution }
     * 
     */
    public WishartDistribution createWishartDistribution() {
        return new WishartDistribution();
    }

    /**
     * Create an instance of {@link CategoricalUnivariateMixtureModel }
     * 
     */
    public CategoricalUnivariateMixtureModel createCategoricalUnivariateMixtureModel() {
        return new CategoricalUnivariateMixtureModel();
    }

    /**
     * Create an instance of {@link FDistribution }
     * 
     */
    public FDistribution createFDistribution() {
        return new FDistribution();
    }

    /**
     * Create an instance of {@link Kurtosis }
     * 
     */
    public Kurtosis createKurtosis() {
        return new Kurtosis();
    }

    /**
     * Create an instance of {@link BinomialDistribution }
     * 
     */
    public BinomialDistribution createBinomialDistribution() {
        return new BinomialDistribution();
    }

    /**
     * Create an instance of {@link ExponentialDistribution }
     * 
     */
    public ExponentialDistribution createExponentialDistribution() {
        return new ExponentialDistribution();
    }

    /**
     * Create an instance of {@link Realisation }
     * 
     */
    public Realisation createRealisation() {
        return new Realisation();
    }

    /**
     * Create an instance of {@link MultinomialDistribution }
     * 
     */
    public MultinomialDistribution createMultinomialDistribution() {
        return new MultinomialDistribution();
    }

    /**
     * Create an instance of {@link ConfusionMatrix }
     * 
     */
    public ConfusionMatrix createConfusionMatrix() {
        return new ConfusionMatrix();
    }

    /**
     * Create an instance of {@link SystematicSample }
     * 
     */
    public SystematicSample createSystematicSample() {
        return new SystematicSample();
    }

    /**
     * Create an instance of {@link BernoulliDistribution }
     * 
     */
    public BernoulliDistribution createBernoulliDistribution() {
        return new BernoulliDistribution();
    }

    /**
     * Create an instance of {@link DiscreteUnivariateMixtureModel }
     * 
     */
    public DiscreteUnivariateMixtureModel createDiscreteUnivariateMixtureModel() {
        return new DiscreteUnivariateMixtureModel();
    }

    /**
     * Create an instance of {@link CredibleInterval }
     * 
     */
    public CredibleInterval createCredibleInterval() {
        return new CredibleInterval();
    }

    /**
     * Create an instance of {@link BetaDistribution }
     * 
     */
    public BetaDistribution createBetaDistribution() {
        return new BetaDistribution();
    }

    /**
     * Create an instance of {@link Mode }
     * 
     */
    public Mode createMode() {
        return new Mode();
    }

    /**
     * Create an instance of {@link Skewness }
     * 
     */
    public Skewness createSkewness() {
        return new Skewness();
    }

    /**
     * Create an instance of {@link DiracDeltaDistribution }
     * 
     */
    public DiracDeltaDistribution createDiracDeltaDistribution() {
        return new DiracDeltaDistribution();
    }

    /**
     * Create an instance of {@link ArrayVarRefType }
     * 
     */
    public ArrayVarRefType createArrayVarRefType() {
        return new ArrayVarRefType();
    }

    /**
     * Create an instance of {@link LaplaceDistribution }
     * 
     */
    public LaplaceDistribution createLaplaceDistribution() {
        return new LaplaceDistribution();
    }

    /**
     * Create an instance of {@link ContinuousUnivariateMixtureModel }
     * 
     */
    public ContinuousUnivariateMixtureModel createContinuousUnivariateMixtureModel() {
        return new ContinuousUnivariateMixtureModel();
    }

    /**
     * Create an instance of {@link MultivariateNormalDistribution }
     * 
     */
    public MultivariateNormalDistribution createMultivariateNormalDistribution() {
        return new MultivariateNormalDistribution();
    }

    /**
     * Create an instance of {@link UniformDistribution }
     * 
     */
    public UniformDistribution createUniformDistribution() {
        return new UniformDistribution();
    }

    /**
     * Create an instance of {@link ContinuousMultivariateMixtureModel }
     * 
     */
    public ContinuousMultivariateMixtureModel createContinuousMultivariateMixtureModel() {
        return new ContinuousMultivariateMixtureModel();
    }

    /**
     * Create an instance of {@link Quantile }
     * 
     */
    public Quantile createQuantile() {
        return new Quantile();
    }

    /**
     * Create an instance of {@link Decile }
     * 
     */
    public Decile createDecile() {
        return new Decile();
    }

    /**
     * Create an instance of {@link DiscreteProbability }
     * 
     */
    public DiscreteProbability createDiscreteProbability() {
        return new DiscreteProbability();
    }

    /**
     * Create an instance of {@link ConfidenceInterval }
     * 
     */
    public ConfidenceInterval createConfidenceInterval() {
        return new ConfidenceInterval();
    }

    /**
     * Create an instance of {@link GeometricDistribution }
     * 
     */
    public GeometricDistribution createGeometricDistribution() {
        return new GeometricDistribution();
    }

    /**
     * Create an instance of {@link Quartile }
     * 
     */
    public Quartile createQuartile() {
        return new Quartile();
    }

    /**
     * Create an instance of {@link Variance }
     * 
     */
    public Variance createVariance() {
        return new Variance();
    }

    /**
     * Create an instance of {@link VarRefType }
     * 
     */
    public VarRefType createVarRefType() {
        return new VarRefType();
    }

    /**
     * Create an instance of {@link CentredMoment }
     * 
     */
    public CentredMoment createCentredMoment() {
        return new CentredMoment();
    }

    /**
     * Create an instance of {@link CauchyDistribution }
     * 
     */
    public CauchyDistribution createCauchyDistribution() {
        return new CauchyDistribution();
    }

    /**
     * Create an instance of {@link Percentile }
     * 
     */
    public Percentile createPercentile() {
        return new Percentile();
    }

    /**
     * Create an instance of {@link GammaDistribution }
     * 
     */
    public GammaDistribution createGammaDistribution() {
        return new GammaDistribution();
    }

    /**
     * Create an instance of {@link StandardDeviation }
     * 
     */
    public StandardDeviation createStandardDeviation() {
        return new StandardDeviation();
    }

    /**
     * Create an instance of {@link LogisticDistribution }
     * 
     */
    public LogisticDistribution createLogisticDistribution() {
        return new LogisticDistribution();
    }

    /**
     * Create an instance of {@link Moment }
     * 
     */
    public Moment createMoment() {
        return new Moment();
    }

    /**
     * Create an instance of {@link InterquartileRange }
     * 
     */
    public InterquartileRange createInterquartileRange() {
        return new InterquartileRange();
    }

    /**
     * Create an instance of {@link NormalDistribution }
     * 
     */
    public NormalDistribution createNormalDistribution() {
        return new NormalDistribution();
    }

    /**
     * Create an instance of {@link UnknownSample }
     * 
     */
    public UnknownSample createUnknownSample() {
        return new UnknownSample();
    }

    /**
     * Create an instance of {@link CoefficientOfVariation }
     * 
     */
    public CoefficientOfVariation createCoefficientOfVariation() {
        return new CoefficientOfVariation();
    }

    /**
     * Create an instance of {@link DirichletDistribution }
     * 
     */
    public DirichletDistribution createDirichletDistribution() {
        return new DirichletDistribution();
    }

    /**
     * Create an instance of {@link UncertMLType }
     * 
     */
    public UncertMLType createUncertMLType() {
        return new UncertMLType();
    }

    /**
     * Create an instance of {@link MultivariateStudentTDistribution }
     * 
     */
    public MultivariateStudentTDistribution createMultivariateStudentTDistribution() {
        return new MultivariateStudentTDistribution();
    }

    /**
     * Create an instance of {@link RandomSample }
     * 
     */
    public RandomSample createRandomSample() {
        return new RandomSample();
    }

    /**
     * Create an instance of {@link Range }
     * 
     */
    public Range createRange() {
        return new Range();
    }

    /**
     * Create an instance of {@link HypergeometricDistribution }
     * 
     */
    public HypergeometricDistribution createHypergeometricDistribution() {
        return new HypergeometricDistribution();
    }

    /**
     * Create an instance of {@link WeibullDistribution }
     * 
     */
    public WeibullDistribution createWeibullDistribution() {
        return new WeibullDistribution();
    }

    /**
     * Create an instance of {@link CovarianceMatrix }
     * 
     */
    public CovarianceMatrix createCovarianceMatrix() {
        return new CovarianceMatrix();
    }

    /**
     * Create an instance of {@link Median }
     * 
     */
    public Median createMedian() {
        return new Median();
    }

    /**
     * Create an instance of {@link NegativeBinomialDistribution }
     * 
     */
    public NegativeBinomialDistribution createNegativeBinomialDistribution() {
        return new NegativeBinomialDistribution();
    }

    /**
     * Create an instance of {@link LogNormalDistribution }
     * 
     */
    public LogNormalDistribution createLogNormalDistribution() {
        return new LogNormalDistribution();
    }

    /**
     * Create an instance of {@link PoissonDistribution }
     * 
     */
    public PoissonDistribution createPoissonDistribution() {
        return new PoissonDistribution();
    }

    /**
     * Create an instance of {@link InverseGammaDistribution }
     * 
     */
    public InverseGammaDistribution createInverseGammaDistribution() {
        return new InverseGammaDistribution();
    }

    /**
     * Create an instance of {@link Mean }
     * 
     */
    public Mean createMean() {
        return new Mean();
    }

    /**
     * Create an instance of {@link ChiSquareDistribution }
     * 
     */
    public ChiSquareDistribution createChiSquareDistribution() {
        return new ChiSquareDistribution();
    }

    /**
     * Create an instance of {@link CategoricalMultivariateMixtureModel }
     * 
     */
    public CategoricalMultivariateMixtureModel createCategoricalMultivariateMixtureModel() {
        return new CategoricalMultivariateMixtureModel();
    }

    /**
     * Create an instance of {@link StudentTDistribution }
     * 
     */
    public StudentTDistribution createStudentTDistribution() {
        return new StudentTDistribution();
    }

    /**
     * Create an instance of {@link StatisticsCollection }
     * 
     */
    public StatisticsCollection createStatisticsCollection() {
        return new StatisticsCollection();
    }

    /**
     * Create an instance of {@link PositiveRealValueType }
     * 
     */
    public PositiveRealValueType createPositiveRealValueType() {
        return new PositiveRealValueType();
    }

    /**
     * Create an instance of {@link QuantileType }
     * 
     */
    public QuantileType createQuantileType() {
        return new QuantileType();
    }

    /**
     * Create an instance of {@link VarianceType }
     * 
     */
    public VarianceType createVarianceType() {
        return new VarianceType();
    }

    /**
     * Create an instance of {@link NormalInverseGammaDistributionType }
     * 
     */
    public NormalInverseGammaDistributionType createNormalInverseGammaDistributionType() {
        return new NormalInverseGammaDistributionType();
    }

    /**
     * Create an instance of {@link CategoricalDistributionType }
     * 
     */
    public CategoricalDistributionType createCategoricalDistributionType() {
        return new CategoricalDistributionType();
    }

    /**
     * Create an instance of {@link CategoricalProbabilityValueType }
     * 
     */
    public CategoricalProbabilityValueType createCategoricalProbabilityValueType() {
        return new CategoricalProbabilityValueType();
    }

    /**
     * Create an instance of {@link RangeType }
     * 
     */
    public RangeType createRangeType() {
        return new RangeType();
    }

    /**
     * Create an instance of {@link WeibullDistributionType }
     * 
     */
    public WeibullDistributionType createWeibullDistributionType() {
        return new WeibullDistributionType();
    }

    /**
     * Create an instance of {@link MomentType }
     * 
     */
    public MomentType createMomentType() {
        return new MomentType();
    }

    /**
     * Create an instance of {@link KurtosisValue }
     * 
     */
    public KurtosisValue createKurtosisValue() {
        return new KurtosisValue();
    }

    /**
     * Create an instance of {@link ContinuousValueType }
     * 
     */
    public ContinuousValueType createContinuousValueType() {
        return new ContinuousValueType();
    }

    /**
     * Create an instance of {@link DiracDeltaDistributionType }
     * 
     */
    public DiracDeltaDistributionType createDiracDeltaDistributionType() {
        return new DiracDeltaDistributionType();
    }

    /**
     * Create an instance of {@link FDistributionType }
     * 
     */
    public FDistributionType createFDistributionType() {
        return new FDistributionType();
    }

    /**
     * Create an instance of {@link SkewnessType }
     * 
     */
    public SkewnessType createSkewnessType() {
        return new SkewnessType();
    }

    /**
     * Create an instance of {@link CoefficientOfVariationType }
     * 
     */
    public CoefficientOfVariationType createCoefficientOfVariationType() {
        return new CoefficientOfVariationType();
    }

    /**
     * Create an instance of {@link GeometricDistributionType }
     * 
     */
    public GeometricDistributionType createGeometricDistributionType() {
        return new GeometricDistributionType();
    }

    /**
     * Create an instance of {@link MedianType }
     * 
     */
    public MedianType createMedianType() {
        return new MedianType();
    }

    /**
     * Create an instance of {@link StudentTDistributionType }
     * 
     */
    public StudentTDistributionType createStudentTDistributionType() {
        return new StudentTDistributionType();
    }

    /**
     * Create an instance of {@link PositiveRealNumber }
     * 
     */
    public PositiveRealNumber createPositiveRealNumber() {
        return new PositiveRealNumber();
    }

    /**
     * Create an instance of {@link SystematicSampleType }
     * 
     */
    public SystematicSampleType createSystematicSampleType() {
        return new SystematicSampleType();
    }

    /**
     * Create an instance of {@link ConfidenceIntervalType }
     * 
     */
    public ConfidenceIntervalType createConfidenceIntervalType() {
        return new ConfidenceIntervalType();
    }

    /**
     * Create an instance of {@link LaplaceDistributionType }
     * 
     */
    public LaplaceDistributionType createLaplaceDistributionType() {
        return new LaplaceDistributionType();
    }

    /**
     * Create an instance of {@link UnknownSampleType }
     * 
     */
    public UnknownSampleType createUnknownSampleType() {
        return new UnknownSampleType();
    }

    /**
     * Create an instance of {@link PositiveNaturalNumber }
     * 
     */
    public PositiveNaturalNumber createPositiveNaturalNumber() {
        return new PositiveNaturalNumber();
    }

    /**
     * Create an instance of {@link ProbabilityValue }
     * 
     */
    public ProbabilityValue createProbabilityValue() {
        return new ProbabilityValue();
    }

    /**
     * Create an instance of {@link InterquartileRangeType }
     * 
     */
    public InterquartileRangeType createInterquartileRangeType() {
        return new InterquartileRangeType();
    }

    /**
     * Create an instance of {@link UniformDistributionType }
     * 
     */
    public UniformDistributionType createUniformDistributionType() {
        return new UniformDistributionType();
    }

    /**
     * Create an instance of {@link Integer }
     * 
     */
    public Integer createInteger() {
        return new Integer();
    }

    /**
     * Create an instance of {@link CauchyDistributionType }
     * 
     */
    public CauchyDistributionType createCauchyDistributionType() {
        return new CauchyDistributionType();
    }

    /**
     * Create an instance of {@link ChiSquareDistributionType }
     * 
     */
    public ChiSquareDistributionType createChiSquareDistributionType() {
        return new ChiSquareDistributionType();
    }

    /**
     * Create an instance of {@link CredibleIntervalType }
     * 
     */
    public CredibleIntervalType createCredibleIntervalType() {
        return new CredibleIntervalType();
    }

    /**
     * Create an instance of {@link MultinomialDistributionType }
     * 
     */
    public MultinomialDistributionType createMultinomialDistributionType() {
        return new MultinomialDistributionType();
    }

    /**
     * Create an instance of {@link NormalDistributionType }
     * 
     */
    public NormalDistributionType createNormalDistributionType() {
        return new NormalDistributionType();
    }

    /**
     * Create an instance of {@link ConfusionMatrixType }
     * 
     */
    public ConfusionMatrixType createConfusionMatrixType() {
        return new ConfusionMatrixType();
    }

    /**
     * Create an instance of {@link KurtosisType }
     * 
     */
    public KurtosisType createKurtosisType() {
        return new KurtosisType();
    }

    /**
     * Create an instance of {@link CorrelationType }
     * 
     */
    public CorrelationType createCorrelationType() {
        return new CorrelationType();
    }

    /**
     * Create an instance of {@link QuartileType }
     * 
     */
    public QuartileType createQuartileType() {
        return new QuartileType();
    }

    /**
     * Create an instance of {@link NegativeBinomialDistributionType }
     * 
     */
    public NegativeBinomialDistributionType createNegativeBinomialDistributionType() {
        return new NegativeBinomialDistributionType();
    }

    /**
     * Create an instance of {@link MeanType }
     * 
     */
    public MeanType createMeanType() {
        return new MeanType();
    }

    /**
     * Create an instance of {@link ModeType }
     * 
     */
    public ModeType createModeType() {
        return new ModeType();
    }

    /**
     * Create an instance of {@link InverseGammaDistributionType }
     * 
     */
    public InverseGammaDistributionType createInverseGammaDistributionType() {
        return new InverseGammaDistributionType();
    }

    /**
     * Create an instance of {@link String }
     * 
     */
    public String createString() {
        return new String();
    }

    /**
     * Create an instance of {@link CategoricalProbabilityArrayValueType }
     * 
     */
    public CategoricalProbabilityArrayValueType createCategoricalProbabilityArrayValueType() {
        return new CategoricalProbabilityArrayValueType();
    }

    /**
     * Create an instance of {@link PoissonDistributionType }
     * 
     */
    public PoissonDistributionType createPoissonDistributionType() {
        return new PoissonDistributionType();
    }

    /**
     * Create an instance of {@link StatisticsCollectionType }
     * 
     */
    public StatisticsCollectionType createStatisticsCollectionType() {
        return new StatisticsCollectionType();
    }

    /**
     * Create an instance of {@link CategoricalArrayValueType }
     * 
     */
    public CategoricalArrayValueType createCategoricalArrayValueType() {
        return new CategoricalArrayValueType();
    }

    /**
     * Create an instance of {@link PercentileType }
     * 
     */
    public PercentileType createPercentileType() {
        return new PercentileType();
    }

    /**
     * Create an instance of {@link LogNormalDistributionType }
     * 
     */
    public LogNormalDistributionType createLogNormalDistributionType() {
        return new LogNormalDistributionType();
    }

    /**
     * Create an instance of {@link WishartDistributionType }
     * 
     */
    public WishartDistributionType createWishartDistributionType() {
        return new WishartDistributionType();
    }

    /**
     * Create an instance of {@link RandomSampleType }
     * 
     */
    public RandomSampleType createRandomSampleType() {
        return new RandomSampleType();
    }

    /**
     * Create an instance of {@link NormalisedValueType }
     * 
     */
    public NormalisedValueType createNormalisedValueType() {
        return new NormalisedValueType();
    }

    /**
     * Create an instance of {@link BinomialDistributionType }
     * 
     */
    public BinomialDistributionType createBinomialDistributionType() {
        return new BinomialDistributionType();
    }

    /**
     * Create an instance of {@link BernoulliDistributionType }
     * 
     */
    public BernoulliDistributionType createBernoulliDistributionType() {
        return new BernoulliDistributionType();
    }

    /**
     * Create an instance of {@link Double }
     * 
     */
    public Double createDouble() {
        return new Double();
    }

    /**
     * Create an instance of {@link BetaDistributionType }
     * 
     */
    public BetaDistributionType createBetaDistributionType() {
        return new BetaDistributionType();
    }

    /**
     * Create an instance of {@link RealisationType }
     * 
     */
    public RealisationType createRealisationType() {
        return new RealisationType();
    }

    /**
     * Create an instance of {@link PositiveRealArrayValueType }
     * 
     */
    public PositiveRealArrayValueType createPositiveRealArrayValueType() {
        return new PositiveRealArrayValueType();
    }

    /**
     * Create an instance of {@link CentredMomentType }
     * 
     */
    public CentredMomentType createCentredMomentType() {
        return new CentredMomentType();
    }

    /**
     * Create an instance of {@link PositiveNaturalNumberValueType }
     * 
     */
    public PositiveNaturalNumberValueType createPositiveNaturalNumberValueType() {
        return new PositiveNaturalNumberValueType();
    }

    /**
     * Create an instance of {@link DecileType }
     * 
     */
    public DecileType createDecileType() {
        return new DecileType();
    }

    /**
     * Create an instance of {@link DiscreteValueType }
     * 
     */
    public DiscreteValueType createDiscreteValueType() {
        return new DiscreteValueType();
    }

    /**
     * Create an instance of {@link CategoricalValueType }
     * 
     */
    public CategoricalValueType createCategoricalValueType() {
        return new CategoricalValueType();
    }

    /**
     * Create an instance of {@link MultivariateNormalDistributionType }
     * 
     */
    public MultivariateNormalDistributionType createMultivariateNormalDistributionType() {
        return new MultivariateNormalDistributionType();
    }

    /**
     * Create an instance of {@link MultivariateStudentTDistributionType }
     * 
     */
    public MultivariateStudentTDistributionType createMultivariateStudentTDistributionType() {
        return new MultivariateStudentTDistributionType();
    }

    /**
     * Create an instance of {@link DiscreteProbabilityType }
     * 
     */
    public DiscreteProbabilityType createDiscreteProbabilityType() {
        return new DiscreteProbabilityType();
    }

    /**
     * Create an instance of {@link DirichletDistributionType }
     * 
     */
    public DirichletDistributionType createDirichletDistributionType() {
        return new DirichletDistributionType();
    }

    /**
     * Create an instance of {@link NaturalNumberValueType }
     * 
     */
    public NaturalNumberValueType createNaturalNumberValueType() {
        return new NaturalNumberValueType();
    }

    /**
     * Create an instance of {@link KurtosisValueType }
     * 
     */
    public KurtosisValueType createKurtosisValueType() {
        return new KurtosisValueType();
    }

    /**
     * Create an instance of {@link ProbabilityValueType }
     * 
     */
    public ProbabilityValueType createProbabilityValueType() {
        return new ProbabilityValueType();
    }

    /**
     * Create an instance of {@link ParetoDistributionType }
     * 
     */
    public ParetoDistributionType createParetoDistributionType() {
        return new ParetoDistributionType();
    }

    /**
     * Create an instance of {@link ExponentialDistributionType }
     * 
     */
    public ExponentialDistributionType createExponentialDistributionType() {
        return new ExponentialDistributionType();
    }

    /**
     * Create an instance of {@link LogisticDistributionType }
     * 
     */
    public LogisticDistributionType createLogisticDistributionType() {
        return new LogisticDistributionType();
    }

    /**
     * Create an instance of {@link HypergeometricDistributionType }
     * 
     */
    public HypergeometricDistributionType createHypergeometricDistributionType() {
        return new HypergeometricDistributionType();
    }

    /**
     * Create an instance of {@link StandardDeviationType }
     * 
     */
    public StandardDeviationType createStandardDeviationType() {
        return new StandardDeviationType();
    }

    /**
     * Create an instance of {@link RealArrayValueType }
     * 
     */
    public RealArrayValueType createRealArrayValueType() {
        return new RealArrayValueType();
    }

    /**
     * Create an instance of {@link GammaDistributionType }
     * 
     */
    public GammaDistributionType createGammaDistributionType() {
        return new GammaDistributionType();
    }

    /**
     * Create an instance of {@link ProbabilityType }
     * 
     */
    public ProbabilityType createProbabilityType() {
        return new ProbabilityType();
    }

    /**
     * Create an instance of {@link CovarianceMatrixType }
     * 
     */
    public CovarianceMatrixType createCovarianceMatrixType() {
        return new CovarianceMatrixType();
    }

    /**
     * Create an instance of {@link NaturalNumberArrayValueType }
     * 
     */
    public NaturalNumberArrayValueType createNaturalNumberArrayValueType() {
        return new NaturalNumberArrayValueType();
    }

    /**
     * Create an instance of {@link DiscreteMultivariateMixtureModelType.Component }
     * 
     */
    public DiscreteMultivariateMixtureModelType.Component createDiscreteMultivariateMixtureModelTypeComponent() {
        return new DiscreteMultivariateMixtureModelType.Component();
    }

    /**
     * Create an instance of {@link CategoricalUnivariateMixtureModelType.Component }
     * 
     */
    public CategoricalUnivariateMixtureModelType.Component createCategoricalUnivariateMixtureModelTypeComponent() {
        return new CategoricalUnivariateMixtureModelType.Component();
    }

    /**
     * Create an instance of {@link ContinuousMultivariateMixtureModelType.Component }
     * 
     */
    public ContinuousMultivariateMixtureModelType.Component createContinuousMultivariateMixtureModelTypeComponent() {
        return new ContinuousMultivariateMixtureModelType.Component();
    }

    /**
     * Create an instance of {@link DiscreteUnivariateMixtureModelType.Component }
     * 
     */
    public DiscreteUnivariateMixtureModelType.Component createDiscreteUnivariateMixtureModelTypeComponent() {
        return new DiscreteUnivariateMixtureModelType.Component();
    }

    /**
     * Create an instance of {@link CategoricalMultivariateMixtureModelType.Component }
     * 
     */
    public CategoricalMultivariateMixtureModelType.Component createCategoricalMultivariateMixtureModelTypeComponent() {
        return new CategoricalMultivariateMixtureModelType.Component();
    }

    /**
     * Create an instance of {@link ContinuousUnivariateMixtureModelType.Component }
     * 
     */
    public ContinuousUnivariateMixtureModelType.Component createContinuousUnivariateMixtureModelTypeComponent() {
        return new ContinuousUnivariateMixtureModelType.Component();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ConfidenceInterval }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "ConfidenceInterval", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<ConfidenceInterval> createConfidenceInterval(ConfidenceInterval value) {
        return new JAXBElement<ConfidenceInterval>(_ConfidenceInterval_QNAME, ConfidenceInterval.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractCategoricalDistributionType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractCategoricalDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDistribution")
    public JAXBElement<AbstractCategoricalDistributionType> createAbstractCategoricalDistribution(AbstractCategoricalDistributionType value) {
        return new JAXBElement<AbstractCategoricalDistributionType>(_AbstractCategoricalDistribution_QNAME, AbstractCategoricalDistributionType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Quantile }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Quantile", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Quantile> createQuantile(Quantile value) {
        return new JAXBElement<Quantile>(_Quantile_QNAME, Quantile.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link MultivariateNormalDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "MultivariateNormalDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousMultivariateDistribution")
    public JAXBElement<MultivariateNormalDistribution> createMultivariateNormalDistribution(MultivariateNormalDistribution value) {
        return new JAXBElement<MultivariateNormalDistribution>(_MultivariateNormalDistribution_QNAME, MultivariateNormalDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link UniformDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "UniformDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<UniformDistribution> createUniformDistribution(UniformDistribution value) {
        return new JAXBElement<UniformDistribution>(_UniformDistribution_QNAME, UniformDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ContinuousUnivariateMixtureModel }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "ContinuousUnivariateMixtureModel", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<ContinuousUnivariateMixtureModel> createContinuousUnivariateMixtureModel(ContinuousUnivariateMixtureModel value) {
        return new JAXBElement<ContinuousUnivariateMixtureModel>(_ContinuousUnivariateMixtureModel_QNAME, ContinuousUnivariateMixtureModel.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LaplaceDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "LaplaceDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<LaplaceDistribution> createLaplaceDistribution(LaplaceDistribution value) {
        return new JAXBElement<LaplaceDistribution>(_LaplaceDistribution_QNAME, LaplaceDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ArrayVarRefType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "arrayVar")
    public JAXBElement<ArrayVarRefType> createArrayVar(ArrayVarRefType value) {
        return new JAXBElement<ArrayVarRefType>(_ArrayVar_QNAME, ArrayVarRefType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Mode }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Mode", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Mode> createMode(Mode value) {
        return new JAXBElement<Mode>(_Mode_QNAME, Mode.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Skewness }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Skewness", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Skewness> createSkewness(Skewness value) {
        return new JAXBElement<Skewness>(_Skewness_QNAME, Skewness.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CredibleInterval }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "CredibleInterval", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<CredibleInterval> createCredibleInterval(CredibleInterval value) {
        return new JAXBElement<CredibleInterval>(_CredibleInterval_QNAME, CredibleInterval.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BernoulliDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "BernoulliDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractCategoricalUnivariateDistribution")
    public JAXBElement<BernoulliDistribution> createBernoulliDistribution(BernoulliDistribution value) {
        return new JAXBElement<BernoulliDistribution>(_BernoulliDistribution_QNAME, BernoulliDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DiscreteUnivariateMixtureModel }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "DiscreteUnivariateMixtureModel", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDiscreteUnivariateDistribution")
    public JAXBElement<DiscreteUnivariateMixtureModel> createDiscreteUnivariateMixtureModel(DiscreteUnivariateMixtureModel value) {
        return new JAXBElement<DiscreteUnivariateMixtureModel>(_DiscreteUnivariateMixtureModel_QNAME, DiscreteUnivariateMixtureModel.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ConfusionMatrix }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "ConfusionMatrix", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractMetric")
    public JAXBElement<ConfusionMatrix> createConfusionMatrix(ConfusionMatrix value) {
        return new JAXBElement<ConfusionMatrix>(_ConfusionMatrix_QNAME, ConfusionMatrix.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BinomialDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "BinomialDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDiscreteUnivariateDistribution")
    public JAXBElement<BinomialDistribution> createBinomialDistribution(BinomialDistribution value) {
        return new JAXBElement<BinomialDistribution>(_BinomialDistribution_QNAME, BinomialDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link FDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "FDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<FDistribution> createFDistribution(FDistribution value) {
        return new JAXBElement<FDistribution>(_FDistribution_QNAME, FDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Kurtosis }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Kurtosis", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Kurtosis> createKurtosis(Kurtosis value) {
        return new JAXBElement<Kurtosis>(_Kurtosis_QNAME, Kurtosis.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link WishartDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "WishartDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDiscreteMultivariateDistribution")
    public JAXBElement<WishartDistribution> createWishartDistribution(WishartDistribution value) {
        return new JAXBElement<WishartDistribution>(_WishartDistribution_QNAME, WishartDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DiscreteMultivariateMixtureModel }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "DiscreteMultivariateMixtureModel", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDiscreteMultivariateDistribution")
    public JAXBElement<DiscreteMultivariateMixtureModel> createDiscreteMultivariateMixtureModel(DiscreteMultivariateMixtureModel value) {
        return new JAXBElement<DiscreteMultivariateMixtureModel>(_DiscreteMultivariateMixtureModel_QNAME, DiscreteMultivariateMixtureModel.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractDiscreteDistributionType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractDiscreteDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDistribution")
    public JAXBElement<AbstractDiscreteDistributionType> createAbstractDiscreteDistribution(AbstractDiscreteDistributionType value) {
        return new JAXBElement<AbstractDiscreteDistributionType>(_AbstractDiscreteDistribution_QNAME, AbstractDiscreteDistributionType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link StatisticsCollection }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "StatisticsCollection", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<StatisticsCollection> createStatisticsCollection(StatisticsCollection value) {
        return new JAXBElement<StatisticsCollection>(_StatisticsCollection_QNAME, StatisticsCollection.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link StudentTDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "StudentTDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<StudentTDistribution> createStudentTDistribution(StudentTDistribution value) {
        return new JAXBElement<StudentTDistribution>(_StudentTDistribution_QNAME, StudentTDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NegativeBinomialDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "NegativeBinomialDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDiscreteUnivariateDistribution")
    public JAXBElement<NegativeBinomialDistribution> createNegativeBinomialDistribution(NegativeBinomialDistribution value) {
        return new JAXBElement<NegativeBinomialDistribution>(_NegativeBinomialDistribution_QNAME, NegativeBinomialDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Median }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Median", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Median> createMedian(Median value) {
        return new JAXBElement<Median>(_Median_QNAME, Median.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link WeibullDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "WeibullDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<WeibullDistribution> createWeibullDistribution(WeibullDistribution value) {
        return new JAXBElement<WeibullDistribution>(_WeibullDistribution_QNAME, WeibullDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Range }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Range", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Range> createRange(Range value) {
        return new JAXBElement<Range>(_Range_QNAME, Range.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link UncertMLType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "UncertML")
    public JAXBElement<UncertMLType> createUncertML(UncertMLType value) {
        return new JAXBElement<UncertMLType>(_UncertML_QNAME, UncertMLType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractCategoricalUnivariateDistributionType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractCategoricalUnivariateDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDistribution")
    public JAXBElement<AbstractCategoricalUnivariateDistributionType> createAbstractCategoricalUnivariateDistribution(AbstractCategoricalUnivariateDistributionType value) {
        return new JAXBElement<AbstractCategoricalUnivariateDistributionType>(_AbstractCategoricalUnivariateDistribution_QNAME, AbstractCategoricalUnivariateDistributionType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractDiscreteMultivariateDistributionType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractDiscreteMultivariateDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDistribution")
    public JAXBElement<AbstractDiscreteMultivariateDistributionType> createAbstractDiscreteMultivariateDistribution(AbstractDiscreteMultivariateDistributionType value) {
        return new JAXBElement<AbstractDiscreteMultivariateDistributionType>(_AbstractDiscreteMultivariateDistribution_QNAME, AbstractDiscreteMultivariateDistributionType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link StandardDeviation }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "StandardDeviation", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<StandardDeviation> createStandardDeviation(StandardDeviation value) {
        return new JAXBElement<StandardDeviation>(_StandardDeviation_QNAME, StandardDeviation.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Percentile }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Percentile", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Percentile> createPercentile(Percentile value) {
        return new JAXBElement<Percentile>(_Percentile_QNAME, Percentile.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link GammaDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "GammaDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<GammaDistribution> createGammaDistribution(GammaDistribution value) {
        return new JAXBElement<GammaDistribution>(_GammaDistribution_QNAME, GammaDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractSampleType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractSample", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractUncertainty")
    public JAXBElement<AbstractSampleType> createAbstractSample(AbstractSampleType value) {
        return new JAXBElement<AbstractSampleType>(_AbstractSample_QNAME, AbstractSampleType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Quartile }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Quartile", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Quartile> createQuartile(Quartile value) {
        return new JAXBElement<Quartile>(_Quartile_QNAME, Quartile.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DiscreteProbability }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "DiscreteProbability", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<DiscreteProbability> createDiscreteProbability(DiscreteProbability value) {
        return new JAXBElement<DiscreteProbability>(_DiscreteProbability_QNAME, DiscreteProbability.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Decile }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Decile", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Decile> createDecile(Decile value) {
        return new JAXBElement<Decile>(_Decile_QNAME, Decile.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ContinuousMultivariateMixtureModel }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "ContinuousMultivariateMixtureModel", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousMultivariateDistribution")
    public JAXBElement<ContinuousMultivariateMixtureModel> createContinuousMultivariateMixtureModel(ContinuousMultivariateMixtureModel value) {
        return new JAXBElement<ContinuousMultivariateMixtureModel>(_ContinuousMultivariateMixtureModel_QNAME, ContinuousMultivariateMixtureModel.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractMetricType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractMetric")
    public JAXBElement<AbstractMetricType> createAbstractMetric(AbstractMetricType value) {
        return new JAXBElement<AbstractMetricType>(_AbstractMetric_QNAME, AbstractMetricType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BigInteger }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "nVal")
    public JAXBElement<BigInteger> createNVal(BigInteger value) {
        return new JAXBElement<BigInteger>(_NVal_QNAME, BigInteger.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractDiscreteUnivariateDistributionType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractDiscreteUnivariateDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDistribution")
    public JAXBElement<AbstractDiscreteUnivariateDistributionType> createAbstractDiscreteUnivariateDistribution(AbstractDiscreteUnivariateDistributionType value) {
        return new JAXBElement<AbstractDiscreteUnivariateDistributionType>(_AbstractDiscreteUnivariateDistribution_QNAME, AbstractDiscreteUnivariateDistributionType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractContinuousMultivariateDistributionType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractContinuousMultivariateDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDistribution")
    public JAXBElement<AbstractContinuousMultivariateDistributionType> createAbstractContinuousMultivariateDistribution(AbstractContinuousMultivariateDistributionType value) {
        return new JAXBElement<AbstractContinuousMultivariateDistributionType>(_AbstractContinuousMultivariateDistribution_QNAME, AbstractContinuousMultivariateDistributionType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DiracDeltaDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "DiracDeltaDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<DiracDeltaDistribution> createDiracDeltaDistribution(DiracDeltaDistribution value) {
        return new JAXBElement<DiracDeltaDistribution>(_DiracDeltaDistribution_QNAME, DiracDeltaDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link BetaDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "BetaDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<BetaDistribution> createBetaDistribution(BetaDistribution value) {
        return new JAXBElement<BetaDistribution>(_BetaDistribution_QNAME, BetaDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link SystematicSample }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "SystematicSample", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSample")
    public JAXBElement<SystematicSample> createSystematicSample(SystematicSample value) {
        return new JAXBElement<SystematicSample>(_SystematicSample_QNAME, SystematicSample.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link MultinomialDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "MultinomialDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDiscreteMultivariateDistribution")
    public JAXBElement<MultinomialDistribution> createMultinomialDistribution(MultinomialDistribution value) {
        return new JAXBElement<MultinomialDistribution>(_MultinomialDistribution_QNAME, MultinomialDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Realisation }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Realisation", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractUncertainty")
    public JAXBElement<Realisation> createRealisation(Realisation value) {
        return new JAXBElement<Realisation>(_Realisation_QNAME, Realisation.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ExponentialDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "ExponentialDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<ExponentialDistribution> createExponentialDistribution(ExponentialDistribution value) {
        return new JAXBElement<ExponentialDistribution>(_ExponentialDistribution_QNAME, ExponentialDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractDistributionType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractUncertainty")
    public JAXBElement<AbstractDistributionType> createAbstractDistribution(AbstractDistributionType value) {
        return new JAXBElement<AbstractDistributionType>(_AbstractDistribution_QNAME, AbstractDistributionType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractContinuousUnivariateDistributionType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractContinuousUnivariateDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDistribution")
    public JAXBElement<AbstractContinuousUnivariateDistributionType> createAbstractContinuousUnivariateDistribution(AbstractContinuousUnivariateDistributionType value) {
        return new JAXBElement<AbstractContinuousUnivariateDistributionType>(_AbstractContinuousUnivariateDistribution_QNAME, AbstractContinuousUnivariateDistributionType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractSummaryStatisticType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractSummaryStatistic", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractUncertainty")
    public JAXBElement<AbstractSummaryStatisticType> createAbstractSummaryStatistic(AbstractSummaryStatisticType value) {
        return new JAXBElement<AbstractSummaryStatisticType>(_AbstractSummaryStatistic_QNAME, AbstractSummaryStatisticType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CategoricalUnivariateMixtureModel }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "CategoricalUnivariateMixtureModel", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractCategoricalUnivariateDistribution")
    public JAXBElement<CategoricalUnivariateMixtureModel> createCategoricalUnivariateMixtureModel(CategoricalUnivariateMixtureModel value) {
        return new JAXBElement<CategoricalUnivariateMixtureModel>(_CategoricalUnivariateMixtureModel_QNAME, CategoricalUnivariateMixtureModel.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CategoricalDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "CategoricalDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractCategoricalMultivariateDistribution")
    public JAXBElement<CategoricalDistribution> createCategoricalDistribution(CategoricalDistribution value) {
        return new JAXBElement<CategoricalDistribution>(_CategoricalDistribution_QNAME, CategoricalDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NormalInverseGammaDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "NormalInverseGammaDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousMultivariateDistribution")
    public JAXBElement<NormalInverseGammaDistribution> createNormalInverseGammaDistribution(NormalInverseGammaDistribution value) {
        return new JAXBElement<NormalInverseGammaDistribution>(_NormalInverseGammaDistribution_QNAME, NormalInverseGammaDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Correlation }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Correlation", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Correlation> createCorrelation(Correlation value) {
        return new JAXBElement<Correlation>(_Correlation_QNAME, Correlation.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ParetoDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "ParetoDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<ParetoDistribution> createParetoDistribution(ParetoDistribution value) {
        return new JAXBElement<ParetoDistribution>(_ParetoDistribution_QNAME, ParetoDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Probability }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Probability", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Probability> createProbability(Probability value) {
        return new JAXBElement<Probability>(_Probability_QNAME, Probability.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CategoricalMultivariateMixtureModel }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "CategoricalMultivariateMixtureModel", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractCategoricalMultivariateDistribution")
    public JAXBElement<CategoricalMultivariateMixtureModel> createCategoricalMultivariateMixtureModel(CategoricalMultivariateMixtureModel value) {
        return new JAXBElement<CategoricalMultivariateMixtureModel>(_CategoricalMultivariateMixtureModel_QNAME, CategoricalMultivariateMixtureModel.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link ChiSquareDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "ChiSquareDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<ChiSquareDistribution> createChiSquareDistribution(ChiSquareDistribution value) {
        return new JAXBElement<ChiSquareDistribution>(_ChiSquareDistribution_QNAME, ChiSquareDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Mean }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Mean", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Mean> createMean(Mean value) {
        return new JAXBElement<Mean>(_Mean_QNAME, Mean.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractUncertaintyType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractUncertainty")
    public JAXBElement<AbstractUncertaintyType> createAbstractUncertainty(AbstractUncertaintyType value) {
        return new JAXBElement<AbstractUncertaintyType>(_AbstractUncertainty_QNAME, AbstractUncertaintyType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link InverseGammaDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "InverseGammaDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<InverseGammaDistribution> createInverseGammaDistribution(InverseGammaDistribution value) {
        return new JAXBElement<InverseGammaDistribution>(_InverseGammaDistribution_QNAME, InverseGammaDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link PoissonDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "PoissonDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDiscreteUnivariateDistribution")
    public JAXBElement<PoissonDistribution> createPoissonDistribution(PoissonDistribution value) {
        return new JAXBElement<PoissonDistribution>(_PoissonDistribution_QNAME, PoissonDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LogNormalDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "LogNormalDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<LogNormalDistribution> createLogNormalDistribution(LogNormalDistribution value) {
        return new JAXBElement<LogNormalDistribution>(_LogNormalDistribution_QNAME, LogNormalDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CovarianceMatrix }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "CovarianceMatrix", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<CovarianceMatrix> createCovarianceMatrix(CovarianceMatrix value) {
        return new JAXBElement<CovarianceMatrix>(_CovarianceMatrix_QNAME, CovarianceMatrix.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractCategoricalMultivariateDistributionType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractCategoricalMultivariateDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDistribution")
    public JAXBElement<AbstractCategoricalMultivariateDistributionType> createAbstractCategoricalMultivariateDistribution(AbstractCategoricalMultivariateDistributionType value) {
        return new JAXBElement<AbstractCategoricalMultivariateDistributionType>(_AbstractCategoricalMultivariateDistribution_QNAME, AbstractCategoricalMultivariateDistributionType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link HypergeometricDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "HypergeometricDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDiscreteUnivariateDistribution")
    public JAXBElement<HypergeometricDistribution> createHypergeometricDistribution(HypergeometricDistribution value) {
        return new JAXBElement<HypergeometricDistribution>(_HypergeometricDistribution_QNAME, HypergeometricDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link RandomSample }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "RandomSample", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSample")
    public JAXBElement<RandomSample> createRandomSample(RandomSample value) {
        return new JAXBElement<RandomSample>(_RandomSample_QNAME, RandomSample.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link MultivariateStudentTDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "MultivariateStudentTDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousMultivariateDistribution")
    public JAXBElement<MultivariateStudentTDistribution> createMultivariateStudentTDistribution(MultivariateStudentTDistribution value) {
        return new JAXBElement<MultivariateStudentTDistribution>(_MultivariateStudentTDistribution_QNAME, MultivariateStudentTDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link DirichletDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "DirichletDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousMultivariateDistribution")
    public JAXBElement<DirichletDistribution> createDirichletDistribution(DirichletDistribution value) {
        return new JAXBElement<DirichletDistribution>(_DirichletDistribution_QNAME, DirichletDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CoefficientOfVariation }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "CoefficientOfVariation", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<CoefficientOfVariation> createCoefficientOfVariation(CoefficientOfVariation value) {
        return new JAXBElement<CoefficientOfVariation>(_CoefficientOfVariation_QNAME, CoefficientOfVariation.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link AbstractContinuousDistributionType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "AbstractContinuousDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDistribution")
    public JAXBElement<AbstractContinuousDistributionType> createAbstractContinuousDistribution(AbstractContinuousDistributionType value) {
        return new JAXBElement<AbstractContinuousDistributionType>(_AbstractContinuousDistribution_QNAME, AbstractContinuousDistributionType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link UnknownSample }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "UnknownSample", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSample")
    public JAXBElement<UnknownSample> createUnknownSample(UnknownSample value) {
        return new JAXBElement<UnknownSample>(_UnknownSample_QNAME, UnknownSample.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Moment }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Moment", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Moment> createMoment(Moment value) {
        return new JAXBElement<Moment>(_Moment_QNAME, Moment.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link InterquartileRange }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "InterquartileRange", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<InterquartileRange> createInterquartileRange(InterquartileRange value) {
        return new JAXBElement<InterquartileRange>(_InterquartileRange_QNAME, InterquartileRange.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link NormalDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "NormalDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<NormalDistribution> createNormalDistribution(NormalDistribution value) {
        return new JAXBElement<NormalDistribution>(_NormalDistribution_QNAME, NormalDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link LogisticDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "LogisticDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<LogisticDistribution> createLogisticDistribution(LogisticDistribution value) {
        return new JAXBElement<LogisticDistribution>(_LogisticDistribution_QNAME, LogisticDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CauchyDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "CauchyDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractContinuousUnivariateDistribution")
    public JAXBElement<CauchyDistribution> createCauchyDistribution(CauchyDistribution value) {
        return new JAXBElement<CauchyDistribution>(_CauchyDistribution_QNAME, CauchyDistribution.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CentredMoment }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "CentredMoment", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<CentredMoment> createCentredMoment(CentredMoment value) {
        return new JAXBElement<CentredMoment>(_CentredMoment_QNAME, CentredMoment.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link VarRefType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "var")
    public JAXBElement<VarRefType> createVar(VarRefType value) {
        return new JAXBElement<VarRefType>(_Var_QNAME, VarRefType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link Variance }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "Variance", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractSummaryStatistic")
    public JAXBElement<Variance> createVariance(Variance value) {
        return new JAXBElement<Variance>(_Variance_QNAME, Variance.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link GeometricDistribution }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = XMLFilter.NS_DEFAULT_UNCERTML, name = "GeometricDistribution", substitutionHeadNamespace = XMLFilter.NS_DEFAULT_UNCERTML, substitutionHeadName = "AbstractDiscreteUnivariateDistribution")
    public JAXBElement<GeometricDistribution> createGeometricDistribution(GeometricDistribution value) {
        return new JAXBElement<GeometricDistribution>(_GeometricDistribution_QNAME, GeometricDistribution.class, null, value);
    }

}
