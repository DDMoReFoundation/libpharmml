/*******************************************************************************
 * Copyright (c) 2014-2016 European Molecular Biology Laboratory,
 * Heidelberg, Germany.
 * 
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of
 * the License at
 * 
 *  		http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on 
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations 
 * under the License.
 ******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.24 at 03:18:36 PM GMT 
//


package eu.ddmore.libpharmml.dom.commontypes;

import java.math.BigInteger;
import java.util.Collections;
import java.util.List;

import javax.swing.tree.TreeNode;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import eu.ddmore.libpharmml.MathExpressionConverter;
import eu.ddmore.libpharmml.dom.Identifiable;
import eu.ddmore.libpharmml.dom.MasterObjectFactory;
import eu.ddmore.libpharmml.impl.MathExpressionConverterToExpression;
import eu.ddmore.libpharmml.impl.MathExpressionConverterToMathML;
import eu.ddmore.libpharmml.visitor.Visitor;


/**
 * Integer value.
 * 
 * <p>Java class for IntValueType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="IntValueType">
 *   &lt;simpleContent>
 *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema>integer">
 *       &lt;attGroup ref="{http://www.pharmml.org/2013/03/CommonTypes}RootAttributesGroup"/>
 *     &lt;/extension>
 *   &lt;/simpleContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "IntValueType", propOrder = {
    "value"
})
public class IntValue extends PharmMLElement implements Scalar, Identifiable{

    @XmlValue
    protected Integer value;
    @XmlAttribute(name = "id")
    @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
    protected String id;
    
    /**
     * Empty constructor
     */
    public IntValue(){}
    
    /**
     * Constructs an {@link IntValue} with the given value.
     * @param integer Value as {@link BigInteger}
     * @deprecated PharmML now uses xs:int values. Use {@link #IntValue(Integer)}.
     */
    @Deprecated
	public IntValue(BigInteger integer){
		this.value = integer.intValue();
	}
	
    /**
     * Constructs an {@link IntValue} with the given value.
     * @param integer Value as {@link Integer}
     */
	public IntValue(Integer integer){
		this.value = integer;
	}

    /**
     * Gets the value of the value property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getValue() {
        return value;
    }

    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setValue(Integer value) {
        this.value = value;
    }
    
    /**
     * Sets the value of the value property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigInteger }
     *     
     * @deprecated PharmML now uses xs:int values. Use {@link #setValue(Integer)}.
     */
    @Deprecated
    public void setValue(BigInteger value) {
        setValue(value.intValue());
    }

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    @Override
	public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    @Override
	public void setId(String value) {
        this.id = value;
    }

	@Override
	public String asString() {
		return String.valueOf(value);
	}
	
	@Override
	public String toString() {
		return super.toString()+" ["+valueToString()+"]";
	}
	
	@Override
	public JAXBElement<IntValue> toJAXBElement() {
		return MasterObjectFactory.COMMONTYPES_OF.createInt(this);
	}

	@Override
	protected List<TreeNode> listChildren() {
		return Collections.emptyList();
	}

	@Override
	public String valueToString() {
		return String.valueOf(value);
	}
	
	@Override
	public String toMathExpression() {
		return new MathExpressionConverterToExpression().convert(this);
	}

	@Override
	public String toMathML() {
		return new MathExpressionConverterToMathML().convert(this);
	}
	
	@Override
	public String convert(MathExpressionConverter converter) {
		return converter.convert(this);
	}

	@Override
	public PharmMLElement clone() {
		return clone(IntValue.class, this);
	}

	@Override
	public JAXBElement<IntValue> toJAXBElementOfLogicBinOp() {
		return ObjectFactory.getInstance().createInt(this);
	}

	@Override
	public void accept(Visitor visitor) {
		visitor.visit(this);
	}
	
	public JAXBElement<IntValue> toJAXBElementVectorValue() {
		return ObjectFactory.getInstance().createInt(this);
	}

}
