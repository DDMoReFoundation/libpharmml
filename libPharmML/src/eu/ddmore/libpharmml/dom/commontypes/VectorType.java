/*******************************************************************************
 * Copyright (c) 2014 European Molecular Biology Laboratory,
 * Heidelberg, Germany.
 *
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of
 * the License at
 *
 * 		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on 
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations 
 * under the License.
 *******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.24 at 03:18:36 PM GMT 
//


package eu.ddmore.libpharmml.dom.commontypes;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlElementRefs;
import javax.xml.bind.annotation.XmlElementWrapper;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;


/**
 * The definition of a non-uniform sequence of numbers. The vector is an ordered list of
 *             values. The values of the sequence element are inserted into the vector at the point of definition.
 *             For example, take the vector (the [] brackets denote a sequence): 0, 4, [0:1:3], 33. Inserting the 
 *             sequence gives us the vector of values: 0, 4, 0, 1, 2, 3, 33. 
 *             
 * 
 * <p>Java class for VectorType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="VectorType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.pharmml.org/2013/03/CommonTypes}PharmMLRootType">
 *       &lt;choice maxOccurs="unbounded">
 *         &lt;element ref="{http://www.pharmml.org/2013/03/CommonTypes}Sequence"/>
 *         &lt;element ref="{http://www.pharmml.org/2013/03/CommonTypes}Scalar"/>
 *       &lt;/choice>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "VectorType", propOrder = {
//	"vectorElements",
	"vectorCellsAndSegments",
    "sequenceOrScalar",
    "elements"
})
@XmlJavaTypeAdapter(VectorType.Adapter.class)
@XmlSeeAlso({
	Vector.class,
	VectorSegment.class
})
public class VectorType extends PharmMLRootType {
	
	@XmlElementRefs({
		@XmlElementRef(name = "Sequence", namespace = "http://www.pharmml.org/2013/03/CommonTypes", type = JAXBElement.class, required = false),
        @XmlElementRef(name = "Scalar", namespace = "http://www.pharmml.org/2013/03/CommonTypes", type = JAXBElement.class, required = false)
	})
	protected List<JAXBElement<?>> sequenceOrScalar;
    
////    @XmlElement(name = "VectorElements", namespace = "http://www.pharmml.org/2013/03/CommonTypes", type = VectorElements.class, required = false)
//	@XmlTransient
//    protected VectorElements vectorElements;
    
    @XmlElementRefs({
    	@XmlElementRef(name = "VectorCell", namespace = "http://www.pharmml.org/2013/03/CommonTypes", type = JAXBElement.class, required = false),
    	@XmlElementRef(name = "VectorSegment", namespace = "http://www.pharmml.org/2013/03/CommonTypes", type = JAXBElement.class, required = false)
    })
    protected List<JAXBElement<?>> vectorCellsAndSegments;
        
    @XmlAttribute(name = "default")
	protected Double defaultValue;
    
    @XmlAttribute(name = "length")
    protected Integer length;
    
    @XmlElementRef(name = "VectorValue", namespace = "http://www.pharmml.org/2013/03/CommonTypes", type=JAXBElement.class)
	@XmlElementWrapper(name = "VectorElements")
	protected List<VectorValue> elements;
    
    /**
     * VectorType class is meant to be abstracted.
     * Since 0.3.2, Vectors are either {@link VectorOfElements} or {@link Vector}
     */
    @Deprecated
    public VectorType(){
    	
    }
    
    protected VectorType(Class<? extends VectorType> _class){

    }

    /**
     * Gets the value of the sequenceOrScalar property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the sequenceOrScalar property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSequenceOrScalar().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link JAXBElement }{@code <}{@link IdValueType }{@code >}
     * {@link JAXBElement }{@code <}{@link FalseBooleanType }{@code >}
     * {@link JAXBElement }{@code <}{@link SequenceType }{@code >}
     * {@link JAXBElement }{@code <}{@link StringValueType }{@code >}
     * {@link JAXBElement }{@code <}{@link IntValueType }{@code >}
     * {@link JAXBElement }{@code <}{@link Object }{@code >}
     * {@link JAXBElement }{@code <}{@link RealValueType }{@code >}
     * {@link JAXBElement }{@code <}{@link BooleanType }{@code >}
     * {@link JAXBElement }{@code <}{@link TrueBooleanType }{@code >}
     * 
     * 
     */
    @Deprecated
    public List<JAXBElement<?>> getSequenceOrScalar() {
        if (sequenceOrScalar == null) {
            sequenceOrScalar = new ArrayList<JAXBElement<?>>();
        }
        return this.sequenceOrScalar;
//	      if (vectorElements == null) {
//	    	  vectorElements = new VectorElements();
//	      }
//	      return this.vectorElements.getChildren();
    }
    
    /**
     * Adapter for unmarshalling from a generic vectorType to a casted vector
     */
    final static class Adapter extends XmlAdapter<VectorType, VectorType>{
    	
    	private static ObjectFactory of = new ObjectFactory();
    	
		@Override
		public VectorType unmarshal(VectorType v) throws Exception {
			if(v.isVectorOfElements()){
				VectorOfElements ve = new VectorOfElements(v);
				return ve;
			} else if (v.isVectorWithDefault()){
				Vector vector = new Vector(v);
				return vector;
			} else {
				return v;
			}
		}

		@Override
		public VectorType marshal(VectorType v) throws Exception {
			if(v instanceof VectorOfElements){
//				v.getVectorElements().getChildren().clear();
//				Iterator<VectorValue> it = ((VectorOfElements)v).getListOfElements().iterator();
//				while(it.hasNext()){
//					v.getVectorElements().getChildren().add(vectorValueToJaxb(it.next()));
//				}
//				v.getVectorElements().setListOfElements(((VectorOfElements)v).getListOfElements());
				v.length = ((VectorOfElements)v).getListOfElements().size();
				return v;
			} else if (v instanceof Vector){
				v.getVectorCellsAndSegments().clear();
				for(VectorCell cell : ((Vector)v).getListOfVectorCells()){
					v.getVectorCellsAndSegments().add(of.createVectorCell(cell));
				}
				for(VectorSegment segment : ((Vector)v).getListOfVectorSegments()){
					v.getVectorCellsAndSegments().add(of.createVectorSegment(segment));
				}
				return v;
			} else {
				throw new RuntimeException();
//				return v;
			}
		}
		
		private JAXBElement<? extends VectorValue> vectorValueToJaxb(VectorValue value){
			if(value instanceof RealValueType){
				return of.createReal((RealValueType) value);
			} else if (value instanceof SymbolRefType){
				return of.createSymbRef((SymbolRefType) value);
			} else {
				return null;
			}
		}
    	
    }
    
    private boolean isVectorOfElements(){
//    	return (vectorElements != null || (sequenceOrScalar != null && sequenceOrScalar.size() > 0));
    	return (elements != null || (sequenceOrScalar != null && sequenceOrScalar.size() > 0));

    }
    
    private boolean isVectorWithDefault(){
    	return (vectorCellsAndSegments != null);
    }
    
    @XmlAccessorType(XmlAccessType.FIELD)
    @XmlType(name = "VectorElements", propOrder = {
    	    "elements"
    	})
    final static class VectorElements extends PharmMLRootType {
    	
//    	@XmlElementRefs({
//            @XmlElementRef(name = "Sequence", namespace = "http://www.pharmml.org/2013/03/CommonTypes", type = JAXBElement.class, required = false),
//            @XmlElementRef(name = "Scalar", namespace = "http://www.pharmml.org/2013/03/CommonTypes", type = JAXBElement.class, required = false),
//            @XmlElementRef(name = "SymbRef", namespace = "http://www.pharmml.org/2013/03/CommonTypes", type = JAXBElement.class, required = false)
//        })
//    	private List<JAXBElement<?>> elements;
//    	
//    	List<JAXBElement<?>> getChildren(){
//    		if(elements == null){
//    			elements = new ArrayList<JAXBElement<?>>();
//    		}
//    		return elements;
//    	}
//    	
//    	void setChildren(List<JAXBElement<?>> children){
//    		elements = children;
//    	}
    	
    	@XmlElementRef(name = "VectorValue", namespace = "http://www.pharmml.org/2013/03/CommonTypes", type=JAXBElement.class)
    	private List<VectorValue> elements;
    	
    	List<VectorValue> getListOfElements(){
    		if(elements == null){
    			elements = new ArrayList<VectorValue>();
    		}
    		return elements;
    	}
    	
    	void setListOfElements(List<VectorValue> elements){
    		this.elements = elements;
    	}
    	
    }
    
    protected List<JAXBElement<?>> getVectorCellsAndSegments(){
    	if(vectorCellsAndSegments == null){
    		vectorCellsAndSegments = new ArrayList<JAXBElement<?>>();
    	}
    	return vectorCellsAndSegments;
    }

}
