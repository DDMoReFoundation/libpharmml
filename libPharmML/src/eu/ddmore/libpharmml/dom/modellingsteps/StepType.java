/*******************************************************************************
 * Copyright (c) 2014-2016 European Molecular Biology Laboratory,
 * Heidelberg, Germany.
 * 
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of
 * the License at
 * 
 *  		http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on 
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations 
 * under the License.
 ******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.24 at 03:18:36 PM GMT 
//


package eu.ddmore.libpharmml.dom.modellingsteps;

import java.util.ArrayList;
import java.util.List;

import javax.swing.tree.TreeNode;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import eu.ddmore.libpharmml.IErrorHandler;
import eu.ddmore.libpharmml.dom.commontypes.OidRef;
import eu.ddmore.libpharmml.dom.commontypes.PharmMLRootType;
import eu.ddmore.libpharmml.dom.tags.PharmMLObject;
import eu.ddmore.libpharmml.dom.tags.ReferenceContainer;
import eu.ddmore.libpharmml.impl.XMLFilter;
import eu.ddmore.libpharmml.util.ChainedList;
import eu.ddmore.libpharmml.validation.SymbolResolver;


/**
 * 
 *                 Type defining a modelling step and its dependencies. 
 *             
 * 
 * <p>Java class for StepType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="StepType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.pharmml.org/2013/03/CommonTypes}PharmMLRootType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.pharmml.org/2013/03/CommonTypes}OidRef"/>
 *         &lt;element name="Dependents" type="{http://www.pharmml.org/2013/03/ModellingSteps}DependentsType" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "StepType", propOrder = {
    "oidRef",
    "dependents"
})
public class StepType
    extends PharmMLRootType implements ReferenceContainer
{

    @XmlElement(name = "OidRef", namespace = XMLFilter.NS_DEFAULT_CT, required = true)
    protected OidRef oidRef;
    @XmlElement(name = "Dependents")
    protected List<DependentsType> dependents;

    /**
     * Gets the value of the oidRef property.
     * 
     * @return
     *     possible object is
     *     {@link OidRef }
     *     
     */
    public OidRef getOidRef() {
        return oidRef;
    }

    /**
     * Sets the value of the oidRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link OidRef }
     *     
     */
    public void setOidRef(OidRef value) {
        this.oidRef = value;
    }

    /**
     * Gets the value of the dependents property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the dependents property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getDependents().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link DependentsType }
     * 
     * 
     */
    public List<DependentsType> getDependents() {
        if (dependents == null) {
            dependents = new ArrayList<DependentsType>();
        }
        return this.dependents;
    }
    
    @Override
	protected List<TreeNode> listChildren() {
		return new ChainedList<TreeNode>()
				.addIfNotNull(oidRef)
				.addIfNotNull(dependents);
	}

	@Override
	public void validateReferences(SymbolResolver sr, IErrorHandler errorHandler) {
		if(oidRef != null && oidRef.getOidRef() != null){
			if(sr.containsObject(oidRef.getOidRef())){
				PharmMLObject object = sr.getObject(oidRef.getOidRef());
				if(!(object instanceof Simulation || object instanceof Estimation || object instanceof OptimalDesignStep)){
					sr.handleIncompatibleObject(oidRef, object, this);
				}
			} else {
				sr.handleUnresolvedObject(oidRef);
			}
		}
	}

}
