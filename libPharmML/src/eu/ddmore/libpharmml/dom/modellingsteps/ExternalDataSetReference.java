//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.01.29 at 10:42:09 AM GMT 
//


package eu.ddmore.libpharmml.dom.modellingsteps;

import java.util.List;

import javax.swing.tree.TreeNode;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;

import eu.ddmore.libpharmml.IErrorHandler;
import eu.ddmore.libpharmml.dom.commontypes.OidRef;
import eu.ddmore.libpharmml.dom.commontypes.PharmMLRootType;
import eu.ddmore.libpharmml.dom.dataset.TargetToolDataSet;
import eu.ddmore.libpharmml.dom.tags.PharmMLObject;
import eu.ddmore.libpharmml.dom.tags.ReferenceContainer;
import eu.ddmore.libpharmml.impl.XMLFilter;
import eu.ddmore.libpharmml.util.ChainedList;
import eu.ddmore.libpharmml.validation.SymbolResolver;


/**
 * 
 *                 Type defining reference to an external dataset.
 *             
 * 
 * <p>Java class for ExternalDataSetReferenceType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ExternalDataSetReferenceType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.pharmml.org/pharmml/0.6/CommonTypes}PharmMLRootType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.pharmml.org/pharmml/0.6/CommonTypes}OidRef"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ExternalDataSetReferenceType", propOrder = {
    "oidRef"
})
public class ExternalDataSetReference
    extends PharmMLRootType implements ReferenceContainer
{

    @XmlElement(name = "OidRef", namespace = XMLFilter.NS_DEFAULT_CT, required = true)
    protected OidRef oidRef;
    
    public ExternalDataSetReference(){}
    
    public ExternalDataSetReference(String oidRef){
    	this.oidRef = new OidRef(oidRef);
    }
    
    public ExternalDataSetReference(ExternalDataSet dataset){
    	this.oidRef = new OidRef(dataset.getOid());
    }

    /**
     * Gets the value of the oidRef property.
     * 
     * @return
     *     possible object is
     *     {@link OidRefType }
     *     
     */
    public OidRef getOidRef() {
        return oidRef;
    }

    /**
     * Sets the value of the oidRef property.
     * 
     * @param value
     *     allowed object is
     *     {@link OidRefType }
     *     
     */
    public void setOidRef(OidRef value) {
        this.oidRef = value;
    }
    
    @Override
	protected List<TreeNode> listChildren() {
		return new ChainedList<TreeNode>()
				.addIfNotNull(oidRef);
	}
    
    @Override
	public void validateReferences(SymbolResolver sr, IErrorHandler errorHandler) {
		if(oidRef != null && oidRef.getOidRef() != null){
			if(sr.containsObject(oidRef.getOidRef())){
				PharmMLObject object = sr.getObject(oidRef.getOidRef());
				if(!(object instanceof ExternalDataSet || object instanceof TargetToolDataSet)){
					sr.handleIncompatibleObject(oidRef, object, this);
				}
			} else {
				sr.handleUnresolvedObject(oidRef);
			}
		}
	}

}
