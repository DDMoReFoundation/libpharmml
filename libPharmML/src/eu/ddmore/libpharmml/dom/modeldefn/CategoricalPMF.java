/*******************************************************************************
 * Copyright (c) 2014 European Molecular Biology Laboratory,
 * Heidelberg, Germany.
 *
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of
 * the License at
 *
 * 		http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on 
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations 
 * under the License.
 *******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.07.21 at 11:29:00 AM BST 
//


package eu.ddmore.libpharmml.dom.modeldefn;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlTransient;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import eu.ddmore.libpharmml.dom.MasterObjectFactory;
import eu.ddmore.libpharmml.dom.commontypes.LinkFunction;
import eu.ddmore.libpharmml.dom.commontypes.PharmMLRootType;
import eu.ddmore.libpharmml.dom.uncertml.AbstractCategoricalMultivariateDistributionType;
import eu.ddmore.libpharmml.dom.uncertml.AbstractCategoricalUnivariateDistributionType;
import eu.ddmore.libpharmml.dom.uncertml.AbstractDiscreteMultivariateDistributionType;
import eu.ddmore.libpharmml.dom.uncertml.AbstractDiscreteUnivariateDistributionType;
import eu.ddmore.libpharmml.dom.uncertml.AbstractDistributionType;
import eu.ddmore.libpharmml.dom.uncertml.BernoulliDistribution;
import eu.ddmore.libpharmml.dom.uncertml.BinomialDistribution;
import eu.ddmore.libpharmml.dom.uncertml.CategoricalDistribution;
import eu.ddmore.libpharmml.dom.uncertml.CategoricalMultivariateMixtureModel;
import eu.ddmore.libpharmml.dom.uncertml.CategoricalUnivariateMixtureModel;
import eu.ddmore.libpharmml.dom.uncertml.DiscreteMultivariateMixtureModel;
import eu.ddmore.libpharmml.dom.uncertml.DiscreteUnivariateMixtureModel;
import eu.ddmore.libpharmml.dom.uncertml.GeometricDistribution;
import eu.ddmore.libpharmml.dom.uncertml.HypergeometricDistribution;
import eu.ddmore.libpharmml.dom.uncertml.MultinomialDistribution;
import eu.ddmore.libpharmml.dom.uncertml.NegativeBinomialDistribution;
import eu.ddmore.libpharmml.dom.uncertml.PoissonDistribution;
import eu.ddmore.libpharmml.dom.uncertml.WishartDistribution;


/**
 * 
 *                 Type specifies a PMF for categorical data models.
 *             
 * 
 * <p>Java class for CategoricalPMFType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CategoricalPMFType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.pharmml.org/2013/03/CommonTypes}PharmMLRootType">
 *       &lt;sequence>
 *         &lt;choice>
 *           &lt;element ref="{http://www.uncertml.org/3.0}AbstractCategoricalUnivariateDistribution" minOccurs="0"/>
 *           &lt;element ref="{http://www.uncertml.org/3.0}AbstractCategoricalMultivariateDistribution" minOccurs="0"/>
 *           &lt;element ref="{http://www.uncertml.org/3.0}AbstractDiscreteUnivariateDistribution" minOccurs="0"/>
 *           &lt;element ref="{http://www.uncertml.org/3.0}AbstractDiscreteMultivariateDistribution" minOccurs="0"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *       &lt;attribute name="linkFunction" use="required" type="{http://www.pharmml.org/2013/03/CommonTypes}LinkFunctionType" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CategoricalPMFType", propOrder = {
    "jaxb_abstractCategoricalUnivariateDistribution",
    "jaxb_abstractCategoricalMultivariateDistribution",
    "jaxb_abstractDiscreteUnivariateDistribution",
    "jaxb_abstractDiscreteMultivariateDistribution"
})
@XmlJavaTypeAdapter(CategoricalPMF.Adapter.class)
public class CategoricalPMF
    extends PharmMLRootType
{

	// --------
    @XmlElementRef(name = "AbstractCategoricalUnivariateDistribution", namespace = "http://www.uncertml.org/3.0", type = JAXBElement.class, required = false)
    protected JAXBElement<? extends AbstractCategoricalUnivariateDistributionType> jaxb_abstractCategoricalUnivariateDistribution;
    @XmlElementRef(name = "AbstractCategoricalMultivariateDistribution", namespace = "http://www.uncertml.org/3.0", type = JAXBElement.class, required = false)
    protected JAXBElement<? extends AbstractCategoricalMultivariateDistributionType> jaxb_abstractCategoricalMultivariateDistribution;
    @XmlElementRef(name = "AbstractDiscreteUnivariateDistribution", namespace = "http://www.uncertml.org/3.0", type = JAXBElement.class, required = false)
    protected JAXBElement<? extends AbstractDiscreteUnivariateDistributionType> jaxb_abstractDiscreteUnivariateDistribution;
    @XmlElementRef(name = "AbstractDiscreteMultivariateDistribution", namespace = "http://www.uncertml.org/3.0", type = JAXBElement.class, required = false)
    protected JAXBElement<? extends AbstractDiscreteMultivariateDistributionType> jaxb_abstractDiscreteMultivariateDistribution;
    
    @XmlTransient
    protected AbstractDistributionType distribution;
    // --------
    
    @XmlAttribute(name = "linkFunction", required = true)
    protected LinkFunction linkFunction;

    /**
     * Empty constructor
     */
    public CategoricalPMF(){}
    
    public CategoricalPMF(LinkFunction linkFunction){
    	this.linkFunction = linkFunction;
    }
    
    /**
     * Gets the value of the distribution property. The distribution may have the following types: 
     * <ul><li>{@link BernoulliDistribution}</li>
     * <li>{@link CategoricalUnivariateMixtureModel}</li>
     * <li>{@link CategoricalMultivariateMixtureModel }</li>
     * <li>{@link CategoricalDistribution }</li>
     * <li>{@link GeometricDistribution }</li>
     * <li>{@link HypergeometricDistribution }</li>
     * <li>{@link NegativeBinomialDistribution }</li>
     * <li>{@link PoissonDistribution }</li>
     * <li>{@link BinomialDistribution }</li>
     * <li>{@link DiscreteUnivariateMixtureModel }</li>
     * <li>{@link WishartDistribution }</li>
     * <li>{@link DiscreteMultivariateMixtureModel }</li>
     * <li>{@link MultinomialDistribution }</li></ul>
     * @return The distribution object that may cast to one of the types above.
     */
    public AbstractDistributionType getDistribution(){
    	return this.distribution;
    }
    
    public void setDistribution(AbstractCategoricalUnivariateDistributionType distribution){
    	this.distribution = distribution;
    }
    public void setDistribution(AbstractCategoricalMultivariateDistributionType distribution){
    	this.distribution = distribution;
    }
    public void setDistribution(AbstractDiscreteUnivariateDistributionType distribution){
    	this.distribution = distribution;
    }
    public void setDistribution(AbstractDiscreteMultivariateDistributionType distribution){
    	this.distribution = distribution;
    }

    /**
     * Gets the value of the linkFunction property.
     * 
     * @return
     *     possible object is
     *     {@link LinkFunction }
     *     
     */
    public LinkFunction getLinkFunction() {
        return linkFunction;
    }

    /**
     * Sets the value of the linkFunction property.
     * 
     * @param value
     *     allowed object is
     *     {@link LinkFunction }
     *     
     */
    public void setLinkFunction(LinkFunction value) {
        this.linkFunction = value;
    }
    
    protected static class Adapter extends XmlAdapter<CategoricalPMF, CategoricalPMF>{

		@Override
		public CategoricalPMF unmarshal(CategoricalPMF v) throws Exception {
			if(v.jaxb_abstractCategoricalMultivariateDistribution != null){
				v.distribution = v.jaxb_abstractCategoricalMultivariateDistribution.getValue();
			} else if(v.jaxb_abstractCategoricalUnivariateDistribution != null){
				v.distribution = v.jaxb_abstractCategoricalUnivariateDistribution.getValue();
			} else if(v.jaxb_abstractDiscreteMultivariateDistribution != null){
				v.distribution = v.jaxb_abstractDiscreteMultivariateDistribution.getValue();
			} else if(v.jaxb_abstractDiscreteUnivariateDistribution != null){
				v.distribution = v.jaxb_abstractDiscreteUnivariateDistribution.getValue();
			}
			return v;
		}

		@Override
		public CategoricalPMF marshal(CategoricalPMF v) throws Exception {
			if(v != null){
				if(v.distribution instanceof AbstractCategoricalMultivariateDistributionType){
					v.jaxb_abstractCategoricalMultivariateDistribution = 
							MasterObjectFactory.createCategoricalMultivariateDistribution(
									(AbstractCategoricalMultivariateDistributionType) v.distribution);
				} else if (v.distribution instanceof AbstractCategoricalUnivariateDistributionType){
					v.jaxb_abstractCategoricalUnivariateDistribution =
							MasterObjectFactory.createCategoricalUnivariateDistribution(
									(AbstractCategoricalUnivariateDistributionType) v.distribution);
				} else if (v.distribution instanceof AbstractDiscreteMultivariateDistributionType){
					v.jaxb_abstractDiscreteMultivariateDistribution = 
							MasterObjectFactory.createDiscreteMultivariateDistribution(
									(AbstractDiscreteMultivariateDistributionType) v.distribution);
				} else if (v.distribution instanceof AbstractDiscreteUnivariateDistributionType){
					v.jaxb_abstractDiscreteUnivariateDistribution = 
							MasterObjectFactory.createDiscreteUnivariateDistribution(
									(AbstractDiscreteUnivariateDistributionType) v.distribution);
				}
				return v;
			} else {
				return null;
			}
		}
    	
    }

}
