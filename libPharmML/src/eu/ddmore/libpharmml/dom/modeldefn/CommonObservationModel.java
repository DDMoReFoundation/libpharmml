/*******************************************************************************
 * Copyright (c) 2014-2016 European Molecular Biology Laboratory,
 * Heidelberg, Germany.
 * 
 * Licensed under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of
 * the License at
 * 
 *  		http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, 
 * software distributed under the License is distributed on 
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied. See the License for the 
 * specific language governing permissions and limitations 
 * under the License.
 ******************************************************************************/
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.07.21 at 11:29:00 AM BST 
//


package eu.ddmore.libpharmml.dom.modeldefn;

import static eu.ddmore.libpharmml.util.Util.filter;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import javax.swing.tree.TreeNode;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;

import eu.ddmore.libpharmml.dom.commontypes.Name;
import eu.ddmore.libpharmml.dom.commontypes.PharmMLElement;
import eu.ddmore.libpharmml.dom.commontypes.PharmMLRootType;
import eu.ddmore.libpharmml.dom.commontypes.SymbolType;
import eu.ddmore.libpharmml.dom.commontypes.VariableDefinition;
import eu.ddmore.libpharmml.dom.maths.ConditionalStatement;
import eu.ddmore.libpharmml.dom.maths.LogicBinOp;
import eu.ddmore.libpharmml.impl.XMLFilter;
import eu.ddmore.libpharmml.util.ChainedList;


/**
 * Abstract type defining common observation model.
 * 
 * <p>Java class for CommonObservationModelType complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CommonObservationModelType">
 *   &lt;complexContent>
 *     &lt;extension base="{http://www.pharmml.org/2013/03/CommonTypes}PharmMLRootType">
 *       &lt;sequence>
 *         &lt;element ref="{http://www.pharmml.org/2013/03/CommonTypes}Name" minOccurs="0"/>
 *         &lt;element ref="{http://www.pharmml.org/2013/03/ModelDefinition}CommonParameterElement" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://www.pharmml.org/2013/03/CommonTypes}Variable" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="Correlation" type="{http://www.pharmml.org/2013/03/ModelDefinition}CorrelationType" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CommonObservationModelType", propOrder = {
    "name",
    "listOfElements"
})
@XmlSeeAlso({
    ContinuousObservationModel.class,
    TimeToEventData.class,
    CategoricalData.class,
    CountData.class
})
//@XmlJavaTypeAdapter(CommonObservationModel.Adapter.class)
public abstract class CommonObservationModel
    extends PharmMLRootType
{

    @XmlElement(name = "Name", namespace = XMLFilter.NS_DEFAULT_CT)
    protected Name name;
    
//    // -----------
//    @XmlElementRef(name = "CommonParameterElement", namespace = XMLFilter.NS_DEFAULT_MDEF, type = JAXBElement.class, required = false)
//    protected List<JAXBElement<? extends CommonParameter>> commonParameterElement;
//    @XmlTransient
//    protected List<CommonParameter> listOfCommonParameterElement;
//    // ------------
//    
//    @XmlElement(name = "Variable", namespace = XMLFilter.NS_DEFAULT_CT)
//    protected List<VariableDefinition> variable;
//    @XmlElement(name = "Correlation")
//    protected List<Correlation> correlation;
    
//    @XmlElementRefs({
//        @XmlElementRef(name = "Correlation", namespace = NS_DEFAULT_MDEF, type = JAXBElement.class, required = false),
//        @XmlElementRef(name = "CommonParameterElement", namespace = NS_DEFAULT_MDEF, type = JAXBElement.class, required = false),
//        @XmlElementRef(name = "Variable", namespace = NS_DEFAULT_CT, type = JAXBElement.class, required = false),
//        @XmlElementRef(name = "ConditionalStatement", namespace = NS_DEFAULT_MDEF, type = JAXBElement.class, required = false),
//        @XmlElementRef(name = "AssignStatement", namespace = NS_DEFAULT_CT, type = JAXBElement.class, required = false)
//    })
//    protected List<JAXBElement<?>> commonParameterElementAndAssignStatementAndConditionalStatement;
    
    @SuppressWarnings("deprecation")
	@XmlElements({
    	@XmlElement(name = "Correlation", namespace = NS_DEFAULT_MDEF, type = Correlation.class, required = false),
        @XmlElement(name = "ConditionalStatement", namespace = NS_DEFAULT_MDEF, type = ConditionalStatement.class, required = false),
        @XmlElement(name = "PopulationParameter", namespace = NS_DEFAULT_MDEF, type = PopulationParameter.class, required = false),
        @XmlElement(name = "Parameter", namespace = NS_DEFAULT_MDEF, type = Parameter.class, required = false),
        @XmlElement(name = "SimpleParameter", namespace = NS_DEFAULT_MDEF, type = SimpleParameter.class, required = false), // BC
        @XmlElement(name = "AssignStatement", namespace = NS_DEFAULT_CT, type = LogicBinOp.class, required = false),
        @XmlElement(name = "IndividualParameter", namespace = NS_DEFAULT_MDEF, type = IndividualParameter.class, required = false),
        @XmlElement(name = "DesignParameter", namespace = NS_DEFAULT_MDEF, type = DesignParameter.class, required = false),
        @XmlElement(name = "RandomVariable", namespace = NS_DEFAULT_MDEF, type = ParameterRandomVariable.class, required = false),
        @XmlElement(name = "Variable", namespace = NS_DEFAULT_CT, type = VariableDefinition.class, required = false)
    })
    protected List<PharmMLElement> listOfElements;

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link Name }
     *     
     */
    public Name getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link Name }
     *     
     */
    public void setName(Name value) {
        this.name = value;
    }
    
    public List<PharmMLElement> getListOfObservationModelElement(){
    	if(listOfElements == null){
    		listOfElements = new ArrayList<PharmMLElement>();
    	}
    	return listOfElements;
    }
    
    /**
     * Returns an <b><u>immutable</u></b> collection of the {@link IndividualParameter} elements of this observation model.
     * @return An <b><u>immutable</u></b> collection of the {@link IndividualParameter} elements of this observation model.
     */
    public Collection<IndividualParameter> fetchIndividualParameters(){
    	return filter(listOfElements, IndividualParameter.class);
    }
    /**
     * Returns an <b><u>immutable</u></b> collection of the {@link PopulationParameter} elements of this observation model.
     * @return An <b><u>immutable</u></b> collection of the {@link PopulationParameter} elements of this observation model.
     */
    public Collection<PopulationParameter> fetchPopulationParameters(){
    	return filter(listOfElements, PopulationParameter.class);
    }
    /**
     * Returns an <b><u>immutable</u></b> collection of the {@link Parameter} elements of this observation model.
     * @return An <b><u>immutable</u></b> collection of the {@link Parameter} elements of this observation model.
     */
    public Collection<Parameter> fetchParameters(){
    	return filter(listOfElements, Parameter.class);
    }
    /**
     * Returns an <b><u>immutable</u></b> collection of the {@link ParameterRandomVariable} elements of this observation model.
     * @return An <b><u>immutable</u></b> collection of the {@link ParameterRandomVariable} elements of this observation model.
     */
    public Collection<ParameterRandomVariable> fetchParameterRandomVariables(){
    	return filter(listOfElements, ParameterRandomVariable.class);
    }
    /**
     * Returns an <b><u>immutable</u></b> collection of the {@link DesignParameter} elements of this observation model.
     * @return An <b><u>immutable</u></b> collection of the {@link DesignParameter} elements of this observation model.
     */
    public Collection<DesignParameter> fetchDesignParameters(){
    	return filter(listOfElements, DesignParameter.class);
    }
    /**
     * Returns an <b><u>immutable</u></b> collection of the {@link LogicBinOp} assign statements of this observation model.
     * @return An <b><u>immutable</u></b> collection of the {@link LogicBinOp} assign statements of this observation model.
     */
    public Collection<LogicBinOp> fetchAssignStatements(){
    	return filter(listOfElements, LogicBinOp.class);
    }
    /**
     * Returns an <b><u>immutable</u></b> collection of the {@link ConditionalStatement} elements of this observation model.
     * @return An <b><u>immutable</u></b> collection of the {@link ConditionalStatement} elements of this observation model.
     */
    public Collection<ConditionalStatement> fetchConditionalStatements(){
    	return filter(listOfElements, ConditionalStatement.class);
    }
    /**
     * Returns an <b><u>immutable</u></b> collection of the {@link Correlation} elements of this observation model.
     * @return An <b><u>immutable</u></b> collection of the {@link Correlation} elements of this observation model.
     */
    public Collection<Correlation> fetchCorrelations(){
    	return filter(listOfElements, Correlation.class);
    }
    /**
     * Returns an <b><u>immutable</u></b> collection of the {@link VariableDefinition} elements of this observation model.
     * @return An <b><u>immutable</u></b> collection of the {@link VariableDefinition} elements of this observation model.
     */
    public Collection<VariableDefinition> fetchVariables(){
    	return filter(listOfElements, VariableDefinition.class);
    }

//    /**
//     * Gets the value of the commonParameterElement property.
//     * 
//     * <p>
//     * This accessor method returns a reference to the live list,
//     * not a snapshot. Therefore any modification you make to the
//     * returned list will be present inside the JAXB object.
//     * This is why there is not a <CODE>set</CODE> method for the commonParameterElement property.
//     * 
//     * <p>
//     * For example, to add a new item, do as follows:
//     * <pre>
//     *    getCommonParameterElement().add(newItem);
//     * </pre>
//     * 
//     * 
//     * <p>
//     * Objects of the following type(s) are allowed in the list
//     * {@link JAXBElement }{@code <}{@link CommonParameterType }{@code >}
//     * {@link JAXBElement }{@code <}{@link SimpleParameterType }{@code >}
//     * {@link JAXBElement }{@code <}{@link IndividualParameterType }{@code >}
//     * {@link JAXBElement }{@code <}{@link ParameterRandomVariableType }{@code >}
//     * 
//     * 
//     */
//    public List<JAXBElement<? extends CommonParameterType>> getListOfCommonParameterElement() {
//        if (commonParameterElement == null) {
//            commonParameterElement = new ArrayList<JAXBElement<? extends CommonParameterType>>();
//        }
//        return this.commonParameterElement;
//    }
    
//    /**
//     * Gets the value of the commonParameterElement property.
//     * 
//     * <p>
//     * This accessor method returns a reference to the live list,
//     * not a snapshot. Therefore any modification you make to the
//     * returned list will be present inside the JAXB object.
//     * This is why there is not a <CODE>set</CODE> method for the commonParameterElement property.
//     * 
//     * <p>
//     * For example, to add a new item, do as follows:
//     * <pre>
//     *    getCommonParameterElement().add(newItem);
//     * </pre>
//     * 
//     * 
//     * <p>
//     * Objects of the following type(s) are allowed in the list
//     * {@link CommonParameter }
//     * {@link SimpleParameter }
//     * {@link IndividualParameter }
//     * {@link ParameterRandomVariable }
//     * 
//     * 
//     */
//    public List<CommonParameter> getListOfCommonParameterElement() {
//        if (listOfCommonParameterElement == null) {
//        	listOfCommonParameterElement = new ArrayList<CommonParameter>();
//        }
//        return this.listOfCommonParameterElement;
//    }
//
//    /**
//     * A variable definition.Gets the value of the variable property.
//     * 
//     * <p>
//     * This accessor method returns a reference to the live list,
//     * not a snapshot. Therefore any modification you make to the
//     * returned list will be present inside the JAXB object.
//     * This is why there is not a <CODE>set</CODE> method for the variable property.
//     * 
//     * <p>
//     * For example, to add a new item, do as follows:
//     * <pre>
//     *    getVariable().add(newItem);
//     * </pre>
//     * 
//     * 
//     * <p>
//     * Objects of the following type(s) are allowed in the list
//     * {@link VariableDefinition }
//     * 
//     * 
//     */
//    public List<VariableDefinition> getListOfVariable() {
//        if (variable == null) {
//            variable = new ArrayList<VariableDefinition>();
//        }
//        return this.variable;
//    }
//
//    /**
//     * Gets the value of the correlation property.
//     * 
//     * <p>
//     * This accessor method returns a reference to the live list,
//     * not a snapshot. Therefore any modification you make to the
//     * returned list will be present inside the JAXB object.
//     * This is why there is not a <CODE>set</CODE> method for the correlation property.
//     * 
//     * <p>
//     * For example, to add a new item, do as follows:
//     * <pre>
//     *    getCorrelation().add(newItem);
//     * </pre>
//     * 
//     * 
//     * <p>
//     * Objects of the following type(s) are allowed in the list
//     * {@link Correlation }
//     * 
//     * 
//     */
//    public List<Correlation> getListOfCorrelation() {
//        if (correlation == null) {
//            correlation = new ArrayList<Correlation>();
//        }
//        return this.correlation;
//    }
    
    /**
     * Creates a new {@link Name} name element, adds it to the current object and returns it.
     * @param name The value of the name
     * @return The created {@link Name} object.
     */
    public Name createName(String name){
            Name el = new Name();
            this.name = el;
            el.setValue(name);
            return el;
    }

    /**
     * Creates a new empty {@link VariableDefinition} variable element, adds it to the current object and returns it.
     * @return The created {@link VariableDefinition} object.
     */
    public VariableDefinition createVariable(){
            VariableDefinition el = new VariableDefinition();
            getListOfObservationModelElement().add(el);
            return el;
    }
    
    /**
     * Creates a new {@link VariableDefinition} variable element, adds it to the current object and returns it.
     * @param symbolId The identifier of the symbol
     * @param type The symbol type
     * @return The created {@link VariableDefinition} object.
     */
    public VariableDefinition createVariable(String symbolId, SymbolType type){
            VariableDefinition el = new VariableDefinition();
            getListOfObservationModelElement().add(el);
            el.setSymbId(symbolId);
            el.setSymbolType(type);
            return el;
    }

    /**
     * Creates a new empty {@link Correlation} correlation element, adds it to the current object and returns it.
     * @return The created {@link Correlation} object.
     */
    public Correlation createCorrelation(){
            Correlation el = new Correlation();
            getListOfObservationModelElement().add(el);
            return el;
    }
    
    public Parameter createParameter(){
    	Parameter param = new Parameter();
    	getListOfObservationModelElement().add(param);
    	return param;
    }
    
    public Parameter createParameter(String symbId){
    	Parameter param = createParameter();
    	param.setSymbId(symbId);
    	return param;
    }
    
    public IndividualParameter createIndividualParameter(){
    	IndividualParameter param = new IndividualParameter();
    	getListOfObservationModelElement().add(param);
    	return param;
    }
    
    public IndividualParameter createIndividualParameter(String symbId){
    	IndividualParameter param = createIndividualParameter();
    	param.setSymbId(symbId);
    	return param;
    }
    
    public PopulationParameter createPopulationParameter(){
    	PopulationParameter param = new PopulationParameter();
    	getListOfObservationModelElement().add(param);
    	return param;
    }
    
    public PopulationParameter createPopulationParameter(String symbId){
    	PopulationParameter param = createPopulationParameter();
    	param.setSymbId(symbId);
    	return param;
    }
    
    public DesignParameter createDesignParameter(){
    	DesignParameter dp = new DesignParameter();
    	getListOfObservationModelElement().add(dp);
    	return dp;
    }
    
    public DesignParameter createDesignParameter(String symbId){
    	DesignParameter dp = createDesignParameter();
    	dp.setSymbId(symbId);
    	return dp;
    }
    
    public ParameterRandomVariable createParameterRandomVariable(){
    	ParameterRandomVariable prv = new ParameterRandomVariable();
    	getListOfObservationModelElement().add(prv);
    	return prv;
    }
    
    public ParameterRandomVariable createParameterRandomVariable(String symbId){
    	ParameterRandomVariable prv = new ParameterRandomVariable();
    	prv.setSymbId(symbId);
    	getListOfObservationModelElement().add(prv);
    	return prv;
    }
    
    protected void afterUnmarshal(Unmarshaller u, Object parent){
//    	if(commonParameterElement != null){
//			listOfCommonParameterElement = new ArrayList<CommonParameter>();
//			for(JAXBElement<? extends CommonParameter> el : commonParameterElement){
//				listOfCommonParameterElement.add(el.getValue());
//			}
//		} else {
//			listOfCommonParameterElement = null;
//		}
    }
    
    protected void beforeMarshal(Marshaller m){
//    	if(listOfCommonParameterElement != null){
//			commonParameterElement = new ArrayList<JAXBElement<? extends CommonParameter>>();
//			for(CommonParameter param : listOfCommonParameterElement){
//				commonParameterElement.add(MasterObjectFactory.createParameter(param));
//			}
//		} else {
//			commonParameterElement = null;
//		}
    }
    
    @Override
    protected List<TreeNode> listChildren() {
    	return new ChainedList<TreeNode>(super.listChildren())
    			.addIfNotNull(name)
    			.addIfNotNull(listOfElements);
    }
    
//    protected static class Adapter extends XmlAdapter<CommonObservationModel,CommonObservationModel>{
//
//		@Override
//		public CommonObservationModel unmarshal(CommonObservationModel v)
//				throws Exception {
//			if(v.commonParameterElement != null){
//				v.listOfCommonParameterElement = new ArrayList<CommonParameterType>();
//				for(JAXBElement<? extends CommonParameterType> el : v.commonParameterElement){
//					v.listOfCommonParameterElement.add(el.getValue());
//				}
//			}
//			return v;
//		}
//
//		@Override
//		public CommonObservationModel marshal(CommonObservationModel v)
//				throws Exception {
//			if(v == null){
//				return v;
//			}
//			if(v.listOfCommonParameterElement != null){
//				v.commonParameterElement = new ArrayList<JAXBElement<? extends CommonParameterType>>();
//				for(CommonParameterType param : v.listOfCommonParameterElement){
//					v.commonParameterElement.add(MasterObjectFactory.createParameter(param));
//				}
//			}
//			return v;
//		}
//    	
//    }


}
